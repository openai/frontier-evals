diff --git a/src/libs/actions/IOU.ts b/src/libs/actions/IOU.ts
index 7ce9b9dfb27..e6e12eb42dd 100644
--- a/src/libs/actions/IOU.ts
+++ b/src/libs/actions/IOU.ts
@@ -74,7 +74,6 @@ import * as Category from './Policy/Category';
 import * as Policy from './Policy/Policy';
 import * as Tag from './Policy/Tag';
 import * as Report from './Report';
-import {getRecentWaypoints, sanitizeRecentWaypoints} from './Transaction';
 
 type IOURequestType = ValueOf<typeof CONST.IOU.REQUEST_TYPE>;
 
@@ -3165,7 +3164,7 @@ function updateMoneyRequestDistance({
     policyCategories = {},
 }: UpdateMoneyRequestDistanceParams) {
     const transactionChanges: TransactionChanges = {
-        waypoints: sanitizeRecentWaypoints(waypoints),
+        waypoints,
         routes,
     };
     const allReports = ReportConnection.getAllReports();
@@ -3178,14 +3177,6 @@ function updateMoneyRequestDistance({
         data = getUpdateMoneyRequestParams(transactionID, transactionThreadReportID, transactionChanges, policy, policyTagList, policyCategories, true);
     }
     const {params, onyxData} = data;
-
-    const recentServerValidatedWaypoints = getRecentWaypoints().filter((item) => !item.pendingAction);
-    onyxData?.failureData?.push({
-        onyxMethod: Onyx.METHOD.SET,
-        key: `${ONYXKEYS.NVP_RECENT_WAYPOINTS}`,
-        value: recentServerValidatedWaypoints,
-    });
-
     API.write(WRITE_COMMANDS.UPDATE_MONEY_REQUEST_DISTANCE, params, onyxData);
 }
 
@@ -3835,13 +3826,6 @@ function trackExpense(
         ) ?? {};
     const activeReportID = isMoneyRequestReport ? report.reportID : chatReport?.reportID;
 
-    const recentServerValidatedWaypoints = getRecentWaypoints().filter((item) => !item.pendingAction);
-    onyxData?.failureData?.push({
-        onyxMethod: Onyx.METHOD.SET,
-        key: `${ONYXKEYS.NVP_RECENT_WAYPOINTS}`,
-        value: recentServerValidatedWaypoints,
-    });
-
     switch (action) {
         case CONST.IOU.ACTION.CATEGORIZE: {
             if (!linkedTrackedExpenseReportAction || !actionableWhisperReportActionID || !linkedTrackedExpenseReportID) {
@@ -3930,7 +3914,7 @@ function trackExpense(
                 receiptGpsPoints: gpsPoints ? JSON.stringify(gpsPoints) : undefined,
                 transactionThreadReportID: transactionThreadReportID ?? '-1',
                 createdReportActionIDForThread: createdReportActionIDForThread ?? '-1',
-                waypoints: validWaypoints ? JSON.stringify(sanitizeRecentWaypoints(validWaypoints)) : undefined,
+                waypoints: validWaypoints ? JSON.stringify(validWaypoints) : undefined,
                 customUnitRateID,
             };
             if (actionableWhisperReportActionIDParam) {
@@ -5200,7 +5184,6 @@ function createDistanceRequest(
 
     let parameters: CreateDistanceRequestParams;
     let onyxData: OnyxData;
-    const sanitizedWaypoints = sanitizeRecentWaypoints(validWaypoints);
     if (iouType === CONST.IOU.TYPE.SPLIT) {
         const {
             splitData,
@@ -5233,7 +5216,7 @@ function createDistanceRequest(
             chatReportID: splitData.chatReportID,
             createdChatReportActionID: splitData.createdReportActionID ?? '',
             reportActionID: splitData.reportActionID,
-            waypoints: JSON.stringify(sanitizedWaypoints),
+            waypoints: JSON.stringify(validWaypoints),
             customUnitRateID,
             comment,
             created,
@@ -5295,7 +5278,7 @@ function createDistanceRequest(
             createdChatReportActionID,
             createdIOUReportActionID,
             reportPreviewReportActionID: reportPreviewAction.reportActionID,
-            waypoints: JSON.stringify(sanitizedWaypoints),
+            waypoints: JSON.stringify(validWaypoints),
             created,
             category,
             tag,
@@ -5309,13 +5292,6 @@ function createDistanceRequest(
         };
     }
 
-    const recentServerValidatedWaypoints = getRecentWaypoints().filter((item) => !item.pendingAction);
-    onyxData?.failureData?.push({
-        onyxMethod: Onyx.METHOD.SET,
-        key: `${ONYXKEYS.NVP_RECENT_WAYPOINTS}`,
-        value: recentServerValidatedWaypoints,
-    });
-
     API.write(WRITE_COMMANDS.CREATE_DISTANCE_REQUEST, parameters, onyxData);
     const activeReportID = isMoneyRequestReport ? report?.reportID ?? '-1' : parameters.chatReportID;
     Navigation.dismissModal(isSearchTopmostCentralPane() ? undefined : activeReportID);
diff --git a/src/libs/actions/Transaction.ts b/src/libs/actions/Transaction.ts
index 4b4ef26d957..62ecf739746 100644
--- a/src/libs/actions/Transaction.ts
+++ b/src/libs/actions/Transaction.ts
@@ -126,8 +126,7 @@ function saveWaypoint(transactionID: string, index: string, waypoint: RecentWayp
     const recentWaypointAlreadyExists = recentWaypoints.find((recentWaypoint) => recentWaypoint?.address === waypoint?.address);
     if (!recentWaypointAlreadyExists && waypoint !== null) {
         const clonedWaypoints = lodashClone(recentWaypoints);
-        const updatedWaypoint = {...waypoint, pendingAction: CONST.RED_BRICK_ROAD_PENDING_ACTION.ADD};
-        clonedWaypoints.unshift(updatedWaypoint);
+        clonedWaypoints.unshift(waypoint);
         Onyx.merge(ONYXKEYS.NVP_RECENT_WAYPOINTS, clonedWaypoints.slice(0, CONST.RECENT_WAYPOINTS_NUMBER));
     }
 }
@@ -246,20 +245,6 @@ function getOnyxDataForRouteRequest(transactionID: string, isDraft = false): Ony
     };
 }
 
-/**
- * Sanitizes the waypoints by removing the pendingAction property.
- *
- * @param waypoints - The collection of waypoints to sanitize.
- * @returns The sanitized collection of waypoints.
- */
-function sanitizeRecentWaypoints(waypoints: WaypointCollection): WaypointCollection {
-    return Object.entries(waypoints).reduce((acc, [key, waypoint]) => {
-        const {pendingAction, ...rest} = waypoint as RecentWaypoint;
-        acc[key] = rest;
-        return acc;
-    }, {} as WaypointCollection);
-}
-
 /**
  * Gets the route for a set of waypoints
  * Used so we can generate a map view of the provided waypoints
@@ -267,7 +252,7 @@ function sanitizeRecentWaypoints(waypoints: WaypointCollection): WaypointCollect
 function getRoute(transactionID: string, waypoints: WaypointCollection, isDraft: boolean) {
     const parameters: GetRouteParams = {
         transactionID,
-        waypoints: JSON.stringify(sanitizeRecentWaypoints(waypoints)),
+        waypoints: JSON.stringify(waypoints),
     };
 
     API.read(isDraft ? READ_COMMANDS.GET_ROUTE_FOR_DRAFT : READ_COMMANDS.GET_ROUTE, parameters, getOnyxDataForRouteRequest(transactionID, isDraft));
@@ -485,18 +470,6 @@ function openDraftDistanceExpense() {
     API.read(READ_COMMANDS.OPEN_DRAFT_DISTANCE_EXPENSE, null, onyxData);
 }
 
-function getRecentWaypoints() {
-    return recentWaypoints;
-}
-
-function getAllTransactionViolationsLength() {
-    return allTransactionViolations.length;
-}
-
-function getAllTransactions() {
-    return Object.keys(allTransactions ?? {}).length;
-}
-
 export {
     addStop,
     createInitialWaypoints,
@@ -510,8 +483,4 @@ export {
     setReviewDuplicatesKey,
     abandonReviewDuplicateTransactions,
     openDraftDistanceExpense,
-    getRecentWaypoints,
-    sanitizeRecentWaypoints,
-    getAllTransactionViolationsLength,
-    getAllTransactions,
 };
diff --git a/src/types/onyx/RecentWaypoint.ts b/src/types/onyx/RecentWaypoint.ts
index 39776d0b140..6624eb044f9 100644
--- a/src/types/onyx/RecentWaypoint.ts
+++ b/src/types/onyx/RecentWaypoint.ts
@@ -1,5 +1,3 @@
-import type * as OnyxCommon from './OnyxCommon';
-
 /** Model of recent endpoint used in distance expense */
 type RecentWaypoint = {
     /** The name associated with the address of the waypoint */
@@ -16,9 +14,6 @@ type RecentWaypoint = {
 
     /** A unique key for waypoint is required for correct draggable list rendering */
     keyForList?: string;
-
-    /** The pending action for recent waypoint */
-    pendingAction?: OnyxCommon.PendingAction | null;
 };
 
 export default RecentWaypoint;
