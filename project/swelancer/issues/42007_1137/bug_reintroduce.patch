diff --git a/src/hooks/useResponsiveLayout/index.ts b/src/hooks/useResponsiveLayout/index.ts
index 3aa698e6d65..e02256fb0f1 100644
--- a/src/hooks/useResponsiveLayout/index.ts
+++ b/src/hooks/useResponsiveLayout/index.ts
@@ -1,11 +1,12 @@
 import {NavigationContainerRefContext, NavigationContext} from '@react-navigation/native';
-import {useContext, useMemo} from 'react';
+import {useContext, useMemo, useEffect, useState} from 'react';
 import {Dimensions} from 'react-native';
 import ModalContext from '@components/Modal/ModalContext';
 import useWindowDimensions from '@hooks/useWindowDimensions';
 import variables from '@styles/variables';
 import CONST from '@src/CONST';
 import NAVIGATORS from '@src/NAVIGATORS';
+import Navigation from '@libs/Navigation/Navigation';
 import type ResponsiveLayoutResult from './types';
 
 /**
@@ -64,8 +65,15 @@ export default function useResponsiveLayout(): ResponsiveLayoutResult {
         // or there's a "right modal navigator" or "left modal navigator" on the top of the root navigation stack
         // and the component calling this hook is not the child of another modal type, such as a confirm modal
         (isDisplayedInNarrowModalNavigator && !activeModalType);
+    
+    const [isInModal, setIsInModal] = useState(Navigation.isDisplayedInModal());
+    useEffect(() => {
+        Navigation.isNavigationReady().then(() => {
+            setIsInModal(Navigation.isDisplayedInModal());
+        });
+    }, []);
 
-    const shouldUseNarrowLayout = isSmallScreenWidth || isInNarrowPaneModal;
+    const shouldUseNarrowLayout = isInModal;
 
     return {
         shouldUseNarrowLayout,
diff --git a/src/libs/Navigation/Navigation.ts b/src/libs/Navigation/Navigation.ts
index d5e9c5229a8..a20d1b4b087 100644
--- a/src/libs/Navigation/Navigation.ts
+++ b/src/libs/Navigation/Navigation.ts
@@ -418,6 +418,13 @@ function getTopMostCentralPaneRouteFromRootState() {
     return getTopmostCentralPaneRoute(navigationRef.getRootState() as State<RootStackParamList>);
 }
 
+function isDisplayedInModal() {
+    const state = navigationRef?.current?.getRootState();
+    const lastRoute = state?.routes?.at(-1);
+    const lastRouteName = lastRoute?.name;
+    return lastRouteName === NAVIGATORS.LEFT_MODAL_NAVIGATOR || lastRouteName === NAVIGATORS.RIGHT_MODAL_NAVIGATOR;
+}
+
 export default {
     setShouldPopAllStateOnUP,
     navigate,
@@ -442,6 +449,7 @@ export default {
     closeRHPFlow,
     setNavigationActionToMicrotaskQueue,
     getTopMostCentralPaneRouteFromRootState,
+    isDisplayedInModal,
 };
 
 export {navigationRef};
