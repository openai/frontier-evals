diff --git a/src/libs/KeyboardShortcut/KeyDownPressListener/index.native.ts b/src/libs/KeyboardShortcut/KeyDownPressListener/index.native.ts
index e506a97890c..74bf79778d9 100644
--- a/src/libs/KeyboardShortcut/KeyDownPressListener/index.native.ts
+++ b/src/libs/KeyboardShortcut/KeyDownPressListener/index.native.ts
@@ -1,6 +1,64 @@
 import type {AddKeyDownPressListener, RemoveKeyDownPressListener} from './types';
+import {NativeEventEmitter, NativeModules, Platform} from 'react-native';
+import {setBlockAllModifiers} from '../getKeyEventModifiers';
+import * as KeyCommand from 'react-native-key-command';
 
-const addKeyDownPressListener: AddKeyDownPressListener = () => {};
-const removeKeyDownPressListener: RemoveKeyDownPressListener = () => {};
+let isMessaging = false;
+let subscription: any = null;
 
-export {addKeyDownPressListener, removeKeyDownPressListener};
+const keyCommandEmitter = new NativeEventEmitter(NativeModules.KeyCommandModule);
+
+const handleKeyCommand = (event: any) => {
+    if (!isMessaging) return false;
+
+    // Block ALL keyboard shortcuts while in message mode
+    return true; // Always return true to indicate we've handled (blocked) the event
+};
+
+const addKeyDownPressListener: AddKeyDownPressListener = (callbackFunction) => {
+    return keyCommandEmitter.addListener('KeyCommand', callbackFunction);
+};
+
+const removeKeyDownPressListener: RemoveKeyDownPressListener = (callbackFunction) => {
+    if (callbackFunction?.remove) {
+        callbackFunction.remove();
+    }
+};
+
+// Function to enable/disable message mode
+export const setMessageMode = (messaging: boolean) => {
+    isMessaging = messaging;
+
+    // Enable/disable global modifier blocking
+    setBlockAllModifiers(isMessaging);
+    
+    // Clean up existing subscription
+    if (subscription) {
+        subscription.remove();
+        subscription = null;
+    }
+    
+    // Set up new handler if messaging is enabled
+    if (isMessaging) {
+        // Unregister existing key commands
+        KeyCommand.unregisterKeyCommands?.();
+        
+        // Add aggressive event blocking
+        subscription = keyCommandEmitter.addListener('KeyCommand', handleKeyCommand);
+        
+        if (Platform.OS === 'ios') {
+            // Enable aggressive keyboard command blocking on iOS
+            NativeModules.KeyCommandModule?.setEnabled(true);
+            NativeModules.KeyCommandModule?.blockAllKeyCommands?.(true);
+        }
+    } else {
+        // Re-register key commands when not messaging
+        KeyCommand.registerKeyCommands?.();
+        
+        if (Platform.OS === 'ios') {
+            NativeModules.KeyCommandModule?.blockAllKeyCommands?.(false);
+        }
+    }
+};
+
+export {addKeyDownPressListener, removeKeyDownPressListener};
\ No newline at end of file
diff --git a/src/libs/KeyboardShortcut/KeyDownPressListener/index.ts b/src/libs/KeyboardShortcut/KeyDownPressListener/index.ts
index 7e2b2a2ce31..7eb9f4acbfb 100644
--- a/src/libs/KeyboardShortcut/KeyDownPressListener/index.ts
+++ b/src/libs/KeyboardShortcut/KeyDownPressListener/index.ts
@@ -1,11 +1,112 @@
 import type {AddKeyDownPressListener, RemoveKeyDownPressListener} from './types';
+import {setBlockAllModifiers} from '../getKeyEventModifiers';
 
+let isMessaging = false;
+let messageHandler: ((event: KeyboardEvent) => void) | null = null;
+
+const blockEvent = (event: KeyboardEvent) => {
+    // Stop the event in its tracks
+    event.preventDefault();
+    event.stopPropagation();
+    event.stopImmediatePropagation();
+    
+    // Cancel any pending composition
+    if (event.target instanceof HTMLElement) {
+        const input = event.target as HTMLInputElement;
+        if (input.isContentEditable || input.tagName === 'INPUT' || input.tagName === 'TEXTAREA') {
+            input.blur();
+        }
+    }
+    
+    return false;
+};
+
+const messageInputHandler = (event: KeyboardEvent) => {
+    if (!isMessaging) return;
+
+    // Block ALL keyboard events during messaging except basic text input
+    const key = event.key.toLowerCase();
+    
+    // Always block any modifier key combinations
+    if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
+        return blockEvent(event);
+    }
+
+    // Only allow basic text input characters and essential editing keys
+    const allowedKeys = [
+        'backspace',
+        'delete',
+        'arrowleft',
+        'arrowright',
+        'enter'
+    ];
+
+    if (!allowedKeys.includes(key) && 
+        !/^[a-zA-Z0-9\s.,!?]$/.test(key)) {
+        return blockEvent(event);
+    }
+
+    // Block all other keys
+    if (event.code.startsWith('F') || // Function keys
+        event.code === 'Escape' ||
+        event.code === 'Tab' ||
+        event.code === 'CapsLock' ||
+        event.code === 'PageUp' ||
+        event.code === 'PageDown' ||
+        event.code === 'Home' ||
+        event.code === 'End' ||
+        event.code === 'Insert' ||
+        event.code === 'NumLock' ||
+        event.code === 'ScrollLock' ||
+        event.code === 'Pause' ||
+        event.code === 'ContextMenu') {
+        return blockEvent(event);
+    }
+};
+
+// Capture phase listener to block events before they reach other handlers
 const addKeyDownPressListener: AddKeyDownPressListener = (callbackFunction) => {
-    document.addEventListener('keydown', callbackFunction);
+    document.addEventListener('keydown', callbackFunction, { 
+        capture: true, 
+        passive: false 
+    });
 };
 
 const removeKeyDownPressListener: RemoveKeyDownPressListener = (callbackFunction) => {
-    document.removeEventListener('keydown', callbackFunction);
+    document.removeEventListener('keydown', callbackFunction, { 
+        capture: true 
+    });
+};
+
+// Function to enable/disable message mode
+export const setMessageMode = (messaging: boolean) => {
+    isMessaging = messaging;
+    
+    // Enable/disable global modifier blocking
+    setBlockAllModifiers(isMessaging);
+    
+    // Clean up existing handler
+    if (messageHandler) {
+        document.removeEventListener('keydown', messageHandler, { capture: true });
+        document.removeEventListener('keyup', blockEvent, { capture: true });
+        messageHandler = null;
+    }
+    
+    // Set up new handler if messaging is enabled
+    if (isMessaging) {
+        messageHandler = messageInputHandler;
+        // Use capture phase to intercept events before they reach other handlers
+        document.addEventListener('keydown', messageHandler, { 
+            capture: true, 
+            passive: false 
+        });
+        
+        // Also block keyup events to prevent any keyup-based shortcuts
+        document.addEventListener('keyup', blockEvent, { 
+            capture: true, 
+            passive: false 
+        });
+    }
 };
 
-export {addKeyDownPressListener, removeKeyDownPressListener};
+export {addKeyDownPressListener, removeKeyDownPressListener};
\ No newline at end of file
diff --git a/src/libs/KeyboardShortcut/getKeyEventModifiers.ts b/src/libs/KeyboardShortcut/getKeyEventModifiers.ts
index d6fbf80bc5b..c378132a812 100644
--- a/src/libs/KeyboardShortcut/getKeyEventModifiers.ts
+++ b/src/libs/KeyboardShortcut/getKeyEventModifiers.ts
@@ -6,24 +6,60 @@ const keyModifierCommand = KeyCommand?.constants.keyModifierCommand ?? 'keyModif
 const keyModifierShiftControl = KeyCommand?.constants.keyModifierShiftControl ?? 'keyModifierShiftControl';
 const keyModifierShiftCommand = KeyCommand?.constants.keyModifierShiftCommand ?? 'keyModifierShiftCommand';
 
+let blockAllModifiers = false;
+
 /**
  * Gets modifiers from a keyboard event.
  */
 function getKeyEventModifiers(event: KeyCommandEvent): string[] {
-    if (event.modifierFlags === keyModifierControl) {
-        return ['CONTROL'];
-    }
-    if (event.modifierFlags === keyModifierCommand) {
-        return ['META'];
-    }
-    if (event.modifierFlags === keyModifierShiftControl) {
-        return ['CONTROL', 'Shift'];
+    // If blocking is enabled, block all events by returning all modifiers
+    // This makes the system think every key has all modifiers pressed
+    if (blockAllModifiers) {
+        return ['META', 'CONTROL', 'ALT', 'SHIFT'];
     }
-    if (event.modifierFlags === keyModifierShiftCommand) {
-        return ['META', 'Shift'];
+
+    // Normal modifier handling when not blocking
+    const modifiers: string[] = [];
+
+    // Check each modifier flag individually
+    if (event.modifierFlags) {
+        if (event.modifierFlags & KeyCommand.constants.keyModifierControl) {
+            modifiers.push('CONTROL');
+        }
+        if (event.modifierFlags & KeyCommand.constants.keyModifierCommand) {
+            modifiers.push('META');
+        }
+        if (event.modifierFlags & KeyCommand.constants.keyModifierShift) {
+            modifiers.push('SHIFT');
+        }
+        if (event.modifierFlags & KeyCommand.constants.keyModifierAlt) {
+            modifiers.push('ALT');
+        }
     }
 
-    return [];
+    return modifiers;
 }
 
-export default getKeyEventModifiers;
+/**
+ * Enable/disable blocking of all keyboard modifiers
+ */
+export const setBlockAllModifiers = (block: boolean) => {
+    blockAllModifiers = block;
+
+    // If on native, also update the KeyCommand module
+    if (KeyCommand?.constants) {
+        KeyCommand.unregisterKeyCommands?.();
+        if (block) {
+            // Disable all key commands when blocking
+            KeyCommand.constants.keyInputEnter = '';
+            KeyCommand.constants.keyInputEscape = '';
+            KeyCommand.constants.keyInputUpArrow = '';
+            KeyCommand.constants.keyInputDownArrow = '';
+            KeyCommand.constants.keyInputLeftArrow = '';
+            KeyCommand.constants.keyInputRightArrow = '';
+        }
+        KeyCommand.registerKeyCommands?.();
+    }
+};
+
+export default getKeyEventModifiers;
\ No newline at end of file
