diff --git a/src/CONST.ts b/src/CONST.ts
index 4ca9b45f13d..b32bc8abd64 100755
--- a/src/CONST.ts
+++ b/src/CONST.ts
@@ -1418,7 +1418,6 @@ const CONST = {
     },
     CENTRAL_PANE_ANIMATION_HEIGHT: 200,
     LHN_SKELETON_VIEW_ITEM_HEIGHT: 64,
-    SEARCH_SKELETON_VIEW_ITEM_HEIGHT: 108,
     EXPENSIFY_PARTNER_NAME: 'expensify.com',
     EXPENSIFY_MERCHANT: 'Expensify, Inc.',
     EMAIL: {
diff --git a/src/components/Skeletons/ItemListSkeletonView.tsx b/src/components/Skeletons/ItemListSkeletonView.tsx
index 046cdfffbee..ee1717b7921 100644
--- a/src/components/Skeletons/ItemListSkeletonView.tsx
+++ b/src/components/Skeletons/ItemListSkeletonView.tsx
@@ -10,81 +10,47 @@ type ListItemSkeletonProps = {
     shouldAnimate?: boolean;
     renderSkeletonItem: (args: {itemIndex: number}) => React.ReactNode;
     fixedNumItems?: number;
-    gradientOpacityEnabled?: boolean;
-    itemViewStyle?: StyleProp<ViewStyle>;
-    itemViewHeight?: number;
 };
 
-const getVerticalMargin = (style: StyleProp<ViewStyle>): number => {
-    if (!style) {
-        return 0;
-    }
-
-    const flattenStyle = StyleSheet.flatten(style);
-    const marginVertical = Number(flattenStyle?.marginVertical ?? 0);
-    const marginTop = Number(flattenStyle?.marginTop ?? 0);
-    const marginBottom = Number(flattenStyle?.marginBottom ?? 0);
-
-    return marginVertical + marginTop + marginBottom;
-};
-
-function ItemListSkeletonView({
-    shouldAnimate = true,
-    renderSkeletonItem,
-    fixedNumItems,
-    gradientOpacityEnabled = false,
-    itemViewStyle = {},
-    itemViewHeight = CONST.LHN_SKELETON_VIEW_ITEM_HEIGHT,
-}: ListItemSkeletonProps) {
+function ItemListSkeletonView({shouldAnimate = true, renderSkeletonItem, fixedNumItems}: ListItemSkeletonProps) {
     const theme = useTheme();
     const themeStyles = useThemeStyles();
 
     const [numItems, setNumItems] = useState(fixedNumItems ?? 0);
 
-    const totalItemHeight = itemViewHeight + getVerticalMargin(itemViewStyle);
-
-    const handleLayout = useCallback(
-        (event: LayoutChangeEvent) => {
-            if (fixedNumItems) {
-                return;
-            }
-
-            const totalHeight = event.nativeEvent.layout.height;
-            const newNumItems = Math.ceil(totalHeight / totalItemHeight);
-            if (newNumItems !== numItems) {
-                setNumItems(newNumItems);
-            }
-        },
-        [fixedNumItems, numItems, totalItemHeight],
-    );
-
     const skeletonViewItems = useMemo(() => {
         const items = [];
         for (let i = 0; i < numItems; i++) {
-            const opacity = gradientOpacityEnabled ? 1 - i / (numItems - 1) : 1;
             items.push(
-                <View
-                    key={`skeletonContainer${i}`}
-                    style={[themeStyles.mr5, itemViewStyle, {opacity}]}
+                <SkeletonViewContentLoader
+                    key={`skeletonViewItems${i}`}
+                    animate={shouldAnimate}
+                    height={CONST.LHN_SKELETON_VIEW_ITEM_HEIGHT}
+                    backgroundColor={theme.skeletonLHNIn}
+                    foregroundColor={theme.skeletonLHNOut}
+                    style={themeStyles.mr5}
                 >
-                    <SkeletonViewContentLoader
-                        animate={shouldAnimate}
-                        height={itemViewHeight}
-                        backgroundColor={theme.skeletonLHNIn}
-                        foregroundColor={theme.skeletonLHNOut}
-                    >
-                        {renderSkeletonItem({itemIndex: i})}
-                    </SkeletonViewContentLoader>
-                </View>,
+                    {renderSkeletonItem({itemIndex: i})}
+                </SkeletonViewContentLoader>,
             );
         }
         return items;
-    }, [numItems, shouldAnimate, theme, themeStyles, renderSkeletonItem, gradientOpacityEnabled, itemViewHeight, itemViewStyle]);
+    }, [numItems, shouldAnimate, theme, themeStyles, renderSkeletonItem]);
 
     return (
         <View
             style={[themeStyles.flex1, themeStyles.overflowHidden]}
-            onLayout={handleLayout}
+            onLayout={(event) => {
+                if (fixedNumItems) {
+                    return;
+                }
+
+                const newNumItems = Math.ceil(event.nativeEvent.layout.height / CONST.LHN_SKELETON_VIEW_ITEM_HEIGHT);
+                if (newNumItems === numItems) {
+                    return;
+                }
+                setNumItems(newNumItems);
+            }}
         >
             {skeletonViewItems}
         </View>
