diff --git a/src/pages/home/report/ReportActionItemMessageEdit.tsx b/src/pages/home/report/ReportActionItemMessageEdit.tsx
index d1eb78bcc00..69466144e8f 100644
--- a/src/pages/home/report/ReportActionItemMessageEdit.tsx
+++ b/src/pages/home/report/ReportActionItemMessageEdit.tsx
@@ -50,6 +50,7 @@ import getScrollPosition from './ReportActionCompose/getScrollPosition';
 import type {SuggestionsRef} from './ReportActionCompose/ReportActionCompose';
 import Suggestions from './ReportActionCompose/Suggestions';
 import shouldUseEmojiPickerSelection from './shouldUseEmojiPickerSelection';
+import getButtonState from '../../../libs/getButtonState';
 
 type ReportActionItemMessageEditProps = {
     /** All the data of the action */
@@ -467,6 +468,30 @@ function ReportActionItemMessageEdit(
                 style={[styles.chatItemMessage, styles.flexRow]}
                 ref={containerRef}
             >
+                <View style={[styles.justifyContentEnd]}>
+                    <Tooltip text={translate('common.cancel')}>
+                        <PressableWithFeedback
+                            onPress={deleteDraft}
+                            style={styles.chatItemSubmitButton}
+                            accessibilityRole={CONST.ROLE.BUTTON}
+                            accessibilityLabel={translate('common.close')}
+                            // disable dimming
+                            hoverDimmingValue={1}
+                            pressDimmingValue={1}
+                            hoverStyle={StyleUtils.getButtonBackgroundColorStyle(CONST.BUTTON_STATES.ACTIVE)}
+                            pressStyle={StyleUtils.getButtonBackgroundColorStyle(CONST.BUTTON_STATES.PRESSED)}
+                            // Keep focus on the composer when cancel button is clicked.
+                            onMouseDown={(e) => e.preventDefault()}
+                        >
+                            {({hovered, pressed}) => (
+                                <Icon
+                                    src={Expensicons.Close}
+                                    fill={StyleUtils.getIconFillColor(getButtonState(hovered, pressed))}
+                                />
+                            )}
+                        </PressableWithFeedback>
+                        </Tooltip>
+                    </View>
                 <View
                     style={[
                         isFocused ? styles.chatItemComposeBoxFocusedColor : styles.chatItemComposeBoxColor,
@@ -476,27 +501,7 @@ function ReportActionItemMessageEdit(
                         hasExceededMaxCommentLength && styles.borderColorDanger,
                     ]}
                 >
-                    <View style={[styles.justifyContentEnd, styles.mb1]}>
-                        <Tooltip text={translate('common.cancel')}>
-                            <PressableWithFeedback
-                                onPress={deleteDraft}
-                                style={styles.composerSizeButton}
-                                role={CONST.ROLE.BUTTON}
-                                accessibilityLabel={translate('common.close')}
-                                // disable dimming
-                                hoverDimmingValue={1}
-                                pressDimmingValue={1}
-                                // Keep focus on the composer when cancel button is clicked.
-                                onMouseDown={(e) => e.preventDefault()}
-                            >
-                                <Icon
-                                    fill={theme.icon}
-                                    src={Expensicons.Close}
-                                />
-                            </PressableWithFeedback>
-                        </Tooltip>
-                    </View>
-                    <View style={[StyleUtils.getContainerComposeStyles(), styles.textInputComposeBorder]}>
+                    <View style={StyleUtils.getContainerComposeStyles()}>
                         <Composer
                             multiline
                             ref={(el: TextInput & HTMLTextAreaElement) => {
