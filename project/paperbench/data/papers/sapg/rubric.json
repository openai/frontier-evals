{
    "id": "0d99d4ba-1b8e-4975-a285-6bea71c68933",
    "requirements": "The paper \"SAPG: Split and Aggregate Policy Gradients\" has been replicated.",
    "weight": 1,
    "sub_tasks": [
        {
            "id": "4f31688a-99fa-4c7a-9056-20c19896eb95",
            "requirements": "SAPG has been implemented.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "0cbb6431-5643-4bb2-8804-cae311977bd1",
                    "requirements": "The actor-critic loss using on-policy and off-policy samples has been implemented.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "5cbff28c-0af1-4535-8100-6945c81ada92",
                            "requirements": "The actor loss using on-policy and off-policy samples has been implemented as described in Equation 4.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "b3629831-05ac-4af6-8898-ac0684cc0bc8",
                                    "requirements": "The on-policy actor loss has been implemented as described in Equation 2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "71e63922-52ae-417a-834e-8ed01b0dfefc",
                                    "requirements": "The off-policy actor loss has been implemented as described in Equation 3.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "351366b5-147f-4214-b0c7-8b508de033e6",
                            "requirements": "The critic loss using on-policy and off-policy samples has been implemented as described in Equation 9.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "6998b4d4-adf3-4e18-b668-75b94d843106",
                                    "requirements": "The n-step return for on-policy data has been implemented as described in Equation 5.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "893fdad6-f965-4ea4-ade3-c4ff6208ad00",
                                    "requirements": "The one-step return for off-policy data has been implemented as described in Equation 6.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "9cec8d88-5eaa-4fbe-ab24-3db082104ec4",
                                    "requirements": "The on-policy critic loss has been implemented as described in Equation 7. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "4c79136d-c44e-49cd-8d94-0164ae87bdab",
                                    "requirements": "The off-policy critic loss has been implemented as described in Equation 8.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "0f9641cc-8fd4-4164-b2cf-1b2b7d87cf37",
                    "requirements": "Symmetric aggregation has been implemented as described in Section 4.2.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "67f4ae44-528e-429a-88ff-b8f532909598",
                            "requirements": "Code has been written to set the parameter lambda for off-policy updates to 1.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "e605a74c-dd43-4834-a58c-d2bf7114fa6e",
                            "requirements": "The data sampling procedure has been implemented as defined in Section 4.2.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "9ab81633-ae84-430b-a239-0638d1e0e527",
                                    "requirements": "Code has been written to collect samples from a number of different policies (denoted as $M$ in Section 4.2).",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "4cbd9e69-4605-4390-b4ff-6ca21c1040b9",
                                    "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from policy $i$ for a batch size of $N$ samples used to update policy $i$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "010f50bd-7813-4da8-bd99-41c3cc6ef89c",
                                    "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from any policy except policy $i$ for a batch size of $N$ samples used to update policy $i$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "8b06805d-99c6-44a9-bf9d-42cbba726dfe",
                    "requirements": "Leader-follower aggregation has been implemented as described in Section 4.3 with diversity via latent conditioning as described in Section 4.4.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "8c6031d6-b81a-47cd-987d-dc39b19fcf48",
                            "requirements": "Leader-follower aggregation has been implemented as described in Section 4.3.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "cb7f70fe-ae90-471f-8514-c34edae8f801",
                                    "requirements": "$M$ different policies are used to collect samples.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "98b54a01-428b-470a-aae9-ff5851176bfd",
                                    "requirements": "One policy is selected to be the leader policy and the remaining $M-1$ policies are selected to be the follower policies.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "edb9b108-4a97-47c5-a373-77e65f2e4b1e",
                                    "requirements": "The procedure for sampling on-policy data for the leader, and sub-sampling off-policy data from followers has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "d4e81d58-cf8b-4c6d-afa4-64f6385d7b18",
                                            "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from the leader policy from a batch size of $N$ samples, to be used to update the leader.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development",
                                            "finegrained_task_category": "Experimental Setup"
                                        },
                                        {
                                            "id": "c6fdbab5-5537-4b74-9147-d3495c393f9b",
                                            "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from the follower policies from a batch size of $N$ samples, to be used to update the leader.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development",
                                            "finegrained_task_category": "Method Implementation"
                                        }
                                    ],
                                    "task_category": null,
                                    "finegrained_task_category": null
                                },
                                {
                                    "id": "56005d05-b995-4d2f-93a7-14f287efd4c2",
                                    "requirements": "Code has been written to collect on-policy samples from each follower policy, to be used to update each follower policy.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "cfbaa359-30ff-4059-8399-0d8942a6eb25",
                                    "requirements": "Code has been written to set the parameter lambda for off-policy updates to 1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "fefabdd4-f727-47e8-9a2c-941a5231757f",
                                    "requirements": "Code has been written to update the leader with PPO using on-policy and off-policy data. The off-policy data is weighted by importance sampling.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "56f38bff-c6e8-4db6-9d89-9f742ef65383",
                            "requirements": "Diversity via latent conditioning has been implemented, as described in Section 4.4.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "efcaae18-b57f-4001-9485-88dcbe3adacb",
                                    "requirements": "Code has been written to share the backbone $B_theta$ between the actor policies, conditioned on each policy's hanging parameters $phi_j$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "dd211514-5e19-4f44-b10a-fd1e4d3688b8",
                                    "requirements": "Code has been written to share the backbone $C_psi$ between the actor and critic, conditioned on each policy's hanging parameters $phi_j$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "fca2c094-92fe-4de2-b0d2-17a93cda9389",
                    "requirements": "Leader-follower aggregation has been implemented as described in section 4.3 with diversity through entropy regularization as described in Section 4.5.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "8c6031d6-b81a-47cd-987d-dc39b19fcf49",
                            "requirements": "Leader-follower aggregation has been implemented as described in Section 4.3.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "cb7f70fe-ae90-471f-8514-c34edae8f811",
                                    "requirements": "Code has been written to collect samples using $M$ different policies.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "98b54a01-428b-470a-aae9-ff5851176bcd",
                                    "requirements": "Code has been written to select one policy to be the leader policy and the remaining $M-1$ policies to be the follower policies.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "edb9b108-4a97-47c5-a373-77e65f2e4b9e",
                                    "requirements": "Code has been written to sample on-policy data from the leader, and sub-sample off-policy data from followers.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "9a011b8c-39aa-48a2-846b-9c8f837d29x2",
                                            "requirements": "Code has been written to collect samples using the leader and follower policies. ",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development",
                                            "finegrained_task_category": "Method Implementation"
                                        },
                                        {
                                            "id": "d4e81d58-cf8b-4c6d-afa4-64f6385d7b19",
                                            "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from the leader policy from a batch size of $N$ samples, to be used to update the leader.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development",
                                            "finegrained_task_category": "Method Implementation"
                                        },
                                        {
                                            "id": "c6fdbab5-5537-4b74-9147-d3495c393f8b",
                                            "requirements": "Code has been written to collect $\\frac{N}{2}$ samples from the follower policies from a batch size of $N$ samples, to be used to update the leader.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development",
                                            "finegrained_task_category": "Method Implementation"
                                        }
                                    ],
                                    "task_category": null,
                                    "finegrained_task_category": null
                                },
                                {
                                    "id": "56005d05-b995-4d2f-93a7-14f287efd4d2",
                                    "requirements": "Code has been written to update each follower policy using PPO with on-policy samples.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "cfbaa359-30ff-4059-8399-0d8942a6eb15",
                                    "requirements": "Code has been written to set the parameter lambda for off-policy updates to 1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "534229ab-463a-49c3-a715-03bd07c86af6",
                                    "requirements": "Code has been written to update the leader with PPO using on-policy and off-policy data. The off-policy data is weighted by importance sampling.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "d4b1a8d9-0557-4d8a-a216-7e7b2795bc55",
                            "requirements": "Diversity through entropy regularization has been implemented, as described in Section 4.5.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "0746e34d-9303-4463-80a9-198fd7b2028f",
                                    "requirements": "Code has been written to add an entropy term to the loss of each follower with hyper-parameter $\\sigma$ as a coefficient.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "34bb0d42-a4bc-4068-9029-84ebf09cbf07",
                                    "requirements": "Code has been written for the leader's loss, which, unlike the followers, does not have an entropy term.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "c426f93e-2a1f-4b57-bb29-c669d4a44d9a",
            "requirements": "The experimental setup has been replicated, as described in Section 5.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "758a79c6-97bb-4ddb-a219-98d129d4a353",
                    "requirements": "Code has been written to define the observation space, which consists of joint angles, joint velocities, object pose, object linear velocity, and object angular velocity.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "06a83598-066e-4cf6-a6e9-ad15dc96710b",
                    "requirements": "The hard difficulty tasks have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "35f9ef85-6918-49fd-a0bf-026468822ae9",
                            "requirements": "The Regrasping task has been replicated, using 24576 parallel environments for testing.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "f83017dc-c6c0-4c2c-be6f-6982b2e37aed",
                                    "requirements": "Code has been written to import the Allegro Kuka Regrasping environment from IsaacGymEnvs.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "56a0ccfe-9d55-4d48-9ff1-5af0a7639e1c",
                                    "requirements": "Code has been written to mount an Allegro Hand of 16 degrees of freedom on a Kuka arm of 7 degrees of freedom.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "94e1952d-cb93-4781-8cee-68782aea8b27",
                                    "requirements": "Code has been written to place an object in a random position on a table at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "88db1925-492d-4e7c-89ed-adcfe588b676",
                                    "requirements": "Code has been written to select a three dimensional position at random as the goal at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "185eb404-5449-4ccc-b4aa-0e9ce4c6a9fc",
                                    "requirements": "Code has been written to mark a task as success if the arm lifts the object and holds it at the goal position for 30 time-steps.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "4ddc20c9-92e9-4215-9ad6-27d0e6b66a59",
                                    "requirements": "Code has been written to re-initialize a task if marked as success.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "cb7fd3cd-5beb-44f1-a45b-9a9da478b98c",
                            "requirements": "The Throw task has been replicated, using 24576 parallel environments for testing.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "632bd411-ceeb-4284-8863-508e746edd7e",
                                    "requirements": "Code has been written to import the Allegro Kuka Throw environment from IsaacGymEnvs.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "a7bdf75d-ab03-4e73-9a7a-59615e6764af",
                                    "requirements": "Code has been written to mount an Allegro Hand of 16 degrees of freedom on a Kuka arm of 7 degrees of freedom.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "0c4e69ea-cbf4-49d9-ad39-62500fc4bf26",
                                    "requirements": "Code has been written to place an object in a random position on a table at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "bf6d3e03-06ff-4e45-956b-f7b51e6faafa",
                                    "requirements": "Code has been written to place a bucket at a three dimensional position that is out of reach of the arm at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "2fa8ea31-caca-414b-b778-50fea9ae2283",
                                    "requirements": "Code has been written to mark a task as success if the arm lifts the object and throws it into the bucket.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "82a09e6b-28f7-4eb2-8dac-301a1b8d31c2",
                                    "requirements": "Code has been written to re-initialize a task if marked as success.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "46d28204-6c39-4c80-81ab-ba4e86f8f95a",
                            "requirements": "The Reorientation task has been replicated, using 24576 parallel environments for testing.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "d1c6dd90-961a-4945-889b-1f0320ecb02a",
                                    "requirements": "Code has been written to import the Allegro Kuka Reorientation environment from IsaacGymEnvs.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "0b281ca2-a6d3-4f2c-81e2-6c549010af8b",
                                    "requirements": "Code has been written to mount an Allegro Hand of 16 degrees of freedom on a Kuka arm of 7 degrees of freedom. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "c2ff9000-b2c1-420b-9644-7ec14f5e5a0b",
                                    "requirements": "Code has been written to place an object in a random position on a table at initialization of a task. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "84a8972c-4571-4c4a-9154-52b920cb9246",
                                    "requirements": "Code has been written to select a pose in 7 dimensions at random as the goal at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "6adb40f3-9ff7-454c-96e0-ad17354fb498",
                                    "requirements": "Code has been written to mark a task as success if the arm is able to orient the object in the goal pose.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "dbea6a1f-ff1b-43b3-af09-daa5e91b1b05",
                                    "requirements": "Code has been written to select a new pose as the goal if the task is marked as success.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "0e1aecd9-a7f9-4f22-94ad-e6444c3174d1",
                    "requirements": "The easy difficulty tasks have been implemented.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "3ac4c459-871c-4074-b84b-f973d6f2f266",
                            "requirements": "The Shadow hand task has been implemented, using 24576 parallel environments for testing.     ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "ef7bba46-13c6-4a75-9efb-986659c917ff",
                                    "requirements": "Code has been written to import the Shadow hand environment from IsaacGymEnvs.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "5cb6fc5a-c1ee-4e27-a272-606f26591056",
                                    "requirements": "Code has been written to use a shadow hand of 24 degrees of freedom for manipulation.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "7ca105e5-4ba2-42e7-9af3-34d270cad350",
                                    "requirements": "Code has been written to place a cube on the hand and pick an orientation as random as the goal at initialization of a task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "4aa6c053-2695-4499-8f90-5cb2416f71ce",
                                    "requirements": "Code has been written to mark a task as success when the cube reaches the goal orientation.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "a7c600b0-d7ab-4635-bde8-8328a193e20d",
                                    "requirements": "Code has been written to re-initialize a task if marked as success.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "a905781b-db91-4b0e-9a84-1f514f58e720",
                            "requirements": "The Allegro hand task has been implemented, using 24576 parallel environments for testing.     ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "98a3a49c-5a65-440c-b0b8-9ba652997297",
                                    "requirements": "Code has been written to import the Allegro hand environment from IsaacGymEnvs.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Environment & Infrastructure Setup"
                                },
                                {
                                    "id": "5607d2ef-d61e-4d1e-a1cc-18bd0d2e9832",
                                    "requirements": "Code has been written to use an Allegro hand of 16 degrees of freedom for manipulation.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                },
                                {
                                    "id": "1beb950d-2248-4bed-9e14-f14a69eceba1",
                                    "requirements": "Code has been written to place a cube on the hand and pick an orientation as random as the goal at initialization of a task. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "34a9649f-f372-4489-a4d6-0b2c79b84faa",
                                    "requirements": "Code has been written to mark a task as success when the cube reaches the goal orientation. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "58b76d68-8183-4821-a35e-09fd168fc655",
                                    "requirements": "Code has been written to re-initialize a task if marked as success. ",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Method Implementation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "fb932764-57f1-4d0f-8c5f-a08aaa5941bf",
                    "requirements": "The baseline methods are available for comparison.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "6a5b95b5-4593-4829-bf43-5138a4bd3412",
                            "requirements": "Code has been written to import the PPO algorithm introduced by Schulman et al., 2017, as a baseline.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Method Implementation"
                        },
                        {
                            "id": "cbee4c00-a3b0-42b3-b8e6-ac2091059933",
                            "requirements": "Code has been written to import the Parallel Q-learning algorithm introduced by Li et al., 2023, as a baseline.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Method Implementation"
                        },
                        {
                            "id": "760ed7c6-9a0d-48ac-b162-bae4611a1add",
                            "requirements": "Code has been written to import the DexPBT algorithm introduced by Petrenko et al., 2023, as a baseline.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Method Implementation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "e72b38d4-74ae-46b4-b458-2edad4774d27",
                    "requirements": "Code has been written to run five different seeds for each experiment.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Experimental Setup"
                },
                {
                    "id": "79a1c008-6b96-4d5f-945b-9baa0e423325",
                    "requirements": "Code has been written to use six different policies for SAPG and DexPBT.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "5bf9383b-4137-4d28-a4fa-c4ecf78fe993",
                    "requirements": "Code has been written to use a recurrent policy for AllegroKuka tasks.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "61c3894d-d8a6-4b6e-88b6-9990d7ec6bc9",
                    "requirements": "Code has been written to use an MLP policy for Shadow Hand and Allegro Hand tasks.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "5aed04e1-078b-4325-a6ac-88959f972298",
                    "requirements": "Code has been written to collect 16 steps of experience per instance of the environment before every PPO update.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Experimental Setup"
                },
                {
                    "id": "846e182a-bcbb-4340-a10f-37300c06ae21",
                    "requirements": "Code has been written to set the entropy coefficient to either 0.0, 0.003, or 0.005 for SAPG.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Experimental Setup"
                },
                {
                    "id": "dfe1b771-6aee-4cdb-9b9a-0e4d6429ac9c",
                    "requirements": "Code has been written to set the entropy coefficient to 0 for SAPG in the tasks ShadowHand, AllegroHand, Regreasping, and Throw.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Experimental Setup"
                },
                {
                    "id": "2a843a97-d82b-470f-91b1-a9d39257ac8e",
                    "requirements": "Code has been written to set the entropy coefficient to 0.005 for SAPG in the task Reorientation. ",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Experimental Setup"
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "d728b196-773e-47f6-8fce-622ab84370a4",
            "requirements": "Figure 2 has been replicated.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "3a0a1e3e-2619-49bc-a716-94a0b98fb680",
                    "requirements": "The results for the Shadow Hand task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "92e9f9ec-a6b6-4fe1-95ba-1886c631f8c2",
                            "requirements": "Code has been written to train PPO for 7 different batch sizes ranking in the approximate values of $\\{1500, 3125, 6250, 12500, 25000, 50000, 100000\\}$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "9ada4389-8b53-4d71-ad56-91399b0f3e02",
                            "requirements": "The performance of PPO for all batch sizes was below 12,000.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "28229478-e3d1-4bb3-9d6d-481f685316e4",
                            "requirements": "SAPG performance reaches above 12,000; significantly higher than that of PPO.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "c3d40629-128e-446d-8d9b-f862f8d8ab62",
                    "requirements": "The results for Allegro Kuka Throw task has been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "d411af2a-536b-44a6-a296-047d05d62b49",
                            "requirements": "Code has been written to train PPO for 7 different batch sizes ranking in the approximate values of $\\{1500, 3125, 6250, 12500, 25000, 50000, 100000\\}$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "7dcfd407-ed9a-41e6-bdec-5d5f44e79a03",
                            "requirements": "The performance of PPO for all batch sizes was no greater than 20.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "d76f0652-8315-4be3-9a22-79c94245b25e",
                            "requirements": "SAPG performance reaches approximately 30. Its performance is significantly higher than that of PPO.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "72398b0a-36d9-4582-957f-c7c94c855fe3",
            "requirements": "Figure 5 has been replicated.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "72cdd5cf-94c3-4a73-994c-061f913e0b5d",
                    "requirements": "The results for the Allegro Kuka Regrasping task in figure 5 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "95ca8312-988f-4342-827d-bf4cbe37be09",
                            "requirements": "PPO results were replicated in Allegro Kuka Regrasping.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "843cca35-7ec5-4cc4-8c80-e56e75f320e6",
                                    "requirements": "Code has been written to train and evaluate PPO in the Allegro Kuka Regrasping task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "711e25af-b2eb-46b7-b6a0-8cc60c606c48",
                                    "requirements": "PPO in Allegro Kuka Regrasping task reaches about 10 successes at the beginning of training, and quickly drops to about 0. It is the worst performing method in the test.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "eef9b4e8-f690-4ea4-88ea-3daab1038a97",
                            "requirements": "PQL results were replicated in Allegro Kuka Regrasping.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "842335e8-8d9f-48dd-bf0f-826e0cf6cd80",
                                    "requirements": "Code has been written to train and evaluate PQL in the Allegro Kuka Regrasping task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "a77aadc7-8925-4217-a7ea-140e852c7ed6",
                                    "requirements": "PQL in Allegro Kuka Regrasping task reaches a few number of successes at the beginning of training. Except for the beginning of training, it consistently performs better than PPO.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "d33e963e-3098-4b58-b00f-eb865b735a04",
                            "requirements": "PBT results were replicated in Allegro Kuka Regrasping.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "a81b790b-a196-4697-af20-124c77738773",
                                    "requirements": "Code has been written to train and evaluate PBT in the Allegro Kuka Regrasping task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "bb6ca8ea-4738-4368-9161-768294785488",
                                    "requirements": "PBT in Allegro Kuka Regrasping task rapidly increases the number of successes during training. It significantly outperforms both PPO and PQL.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "0fe6b74e-3c2c-413c-8a01-35d82f97630d",
                            "requirements": "SAPG results were replicated in Allegro Kuka Regrasping.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "3cdd3bb7-802f-4d1f-8b34-058bd2939ca8",
                                    "requirements": "Code has been written to train and evaluate SAPG in the Allegro Kuka Regrasping task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "d05489a2-c250-4b36-a6d2-fd96681470f9",
                                    "requirements": "SAPG in Allegro Kuka Regrasping task rapidly increases the number of successes during training. It outperforms PBT, and it is the best performing method.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "08ed355d-220f-4da6-923a-c627e0f5fbb3",
                    "requirements": "The results for the Allegro Kuka Throw task in figure 5 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "a0656379-092a-4210-a6cc-ebb1a8cbfab2",
                            "requirements": "PPO results were replicated in Allegro Kuka Throw.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "e8ec7033-7d4f-405d-9536-117cbcd6b5af",
                                    "requirements": "PPO has been trained and evaluated in Allegro Kuka Throw task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "674b8bd7-3c08-4526-b277-b491d419f240",
                                    "requirements": "The number of success in PPO in Allegro Kuka Throw task show a rapid increase during training, but drops towards the end of training; it significantly outperforms PQL.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "17a81819-8c78-4632-8bf8-e3232acf88aa",
                            "requirements": "PQL results were replicated in Allegro Kuka Throw.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "4f88f0f3-0aaa-40e0-b1a0-4ed11e1b4755",
                                    "requirements": "PQL has been trained and evaluated in Allegro Kuka Throw task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "933b0de9-a09c-4bb7-8e3f-500b38706541",
                                    "requirements": "The number of success in PQL in Allegro Kuka Throw task is slightly above 0 during training; it is the worst performing method.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "887c4e25-1302-45ee-b344-49b2c4aeaeaf",
                            "requirements": "PBT results were replicated in Allegro Kuka Throw.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "723628ad-6f81-478e-bf22-275a8bbf5536",
                                    "requirements": "PBT has been trained and evaluated in Allegro Kuka Throw task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "833e2a43-ff46-4b25-a28a-4cf895de5ef9",
                                    "requirements": "The number of success in PBT in Allegro Kuka Throw task increase rapidly during training; it outperforms PPO.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "d4957fc6-09e5-41b9-843c-306878f06a76",
                            "requirements": "SAPG results were replicated in Allegro Kuka Throw.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "418b0c7b-d273-447d-a193-8f784834650c",
                                    "requirements": "SAPG has been trained and evaluated in Allegro Kuka Throw task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "a5aa1216-118b-4cda-a0ef-b1e7667e87de",
                                    "requirements": "The number of successes in SAPG in Allegro Kuka Throw task increase rapidly during training; it's the best performing method.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "ad681e1a-1f5f-4cde-822a-2ed1af2911bf",
                    "requirements": "The results for the Allegro Kuka Reorientation task in figure 5 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "b33b0233-4d08-4814-aad2-519d12b7eae0",
                            "requirements": "PPO results were replicated in Allegro Kuka Reorientation.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "9da703e9-7fb2-46c4-a950-52db7ec2ce2a",
                                    "requirements": "PPO has been trained and evaluated in Allegro Kuka Reorientation task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "83634e09-f1d3-4945-9f54-b32bcfab1933",
                                    "requirements": "The number of success in PPO in Allegro Kuka Reorientation task is consistently approximately 0.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "c560bc31-ca78-4274-b025-55dd1ac8e492",
                            "requirements": "PQL results were replicated in Allegro Kuka Reorientation. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "49b1b68b-25e5-4fd4-ada1-38b6a3ce0509",
                                    "requirements": "PQL has been trained and evaluated in Allegro Kuka Reorientation task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "8bfc8f8e-977e-4183-a077-4232f8966649",
                                    "requirements": "The number of success in PQL in Allegro Kuka Reorientation task is consistently approximately 0.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "4630f175-b2c7-442c-978b-56c8d8d43c69",
                            "requirements": "PBT results were replicated in Allegro Kuka Reorientation. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "e95fa200-58f7-4653-a16b-5f197593fdf5",
                                    "requirements": "PBT has been trained and evaluated in Allegro Kuka Reorientation task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "a304b983-430f-4c04-8db2-ee9e982e79d9",
                                    "requirements": "The number of success in PBT in Allegro Kuka Reorientation increases steadily. It performs better than both PPO and PQL.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "eb8a59a4-b808-45ec-89a8-bd36d040e4b9",
                            "requirements": "SAPG results were replicated in Allegro Kuka Reorientation. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "4b212195-caad-4dc9-b977-ff9defcb4814",
                                    "requirements": "SAPG has been trained and evaluated in Allegro Kuka Reorientation task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "8ce095a8-2423-4041-944c-c70dd3e80195",
                                    "requirements": "The number of successes of SAPG in Allegro Kuka Reorientation increases steadily. It is the best performing method.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "134b6e06-92d8-489c-8b96-498fae8bb7b8",
                    "requirements": "The results for the Allegro Hand task in figure 5 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "317b4be2-e43e-45c0-b229-fd1e25105dff",
                            "requirements": "PPO results were replicated in Allegro Hand.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "ec31266e-7771-4899-9507-329b405b6e3a",
                                    "requirements": "PPO has been trained and evaluated in Allegro Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "03fbc6dd-9df3-4c43-86ba-72bad1af6bf3",
                                    "requirements": "The reward of PPO in Allegro Hand task increases steadily. It is only outperformed by PBT.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "c8a8b235-6c4d-47a8-93db-53a267132ef3",
                            "requirements": "PBT results were replicated in Allegro Hand.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "97958a51-f0ca-48bc-bdf6-83cef65a1683",
                                    "requirements": "PBT has been trained and evaluated in Allegro Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "d04b34bf-2027-492c-91e7-c2e0e515c275",
                                    "requirements": "The reward of PBT in Allegro Hand task increases steadily, but it is the worst performing method.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "20c45fb0-551f-4ca1-85ca-d225abe5db29",
                            "requirements": "PQL results were replicated in Allegro Hand.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "40ef59ab-4063-4311-afbf-568dcd052edd",
                                    "requirements": "PQL has been trained and evaluated in Allegro Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "1535c72d-9e09-46bd-871f-3557ba63bff0",
                                    "requirements": "The reward of PQL in Allegro Hand task increases quickly and then plateaus. The performance is similar to that of PPO.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Logging, Analysis & Presentation"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "afdc9f93-ebd8-4b33-a25f-a688999317ea",
                            "requirements": "SAPG results were replicated in Allegro Hand.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "210a9216-a1e4-4002-9b10-ccc74736409f",
                                    "requirements": "SAPG has been trained and evaluated in Allegro Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "f3d5704c-b9da-40be-95cf-9f87ab295527",
                                    "requirements": "The reward of PQL in Allegro Hand task increases steadily throughout training. It is the best performing method.",
                                    "weight": 2,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "f1f9d439-bf66-4441-8b2e-4dfdc3ed3dcb",
                    "requirements": "The results for the Shadow Hand task in figure 5 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "1fc04f35-f801-4cb0-94dd-bb51b1f08f89",
                            "requirements": "PPO results were replicated in Shadow Hand. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "03340bc7-510c-4ce5-80aa-d4b2f8847885",
                                    "requirements": "PPO has been trained and evaluated in Shadow Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "d6c1f104-0072-4443-a1f8-ef1147b8daed",
                                    "requirements": "The reward of PPO in Shadow Hand task increases steadily. It performs similarly to PBT.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "4b530289-ff82-40fe-ba57-5c9b720d8bf7",
                            "requirements": "PBT results were replicated in Shadow Hand. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "476e166e-b412-413e-825e-07c57c90300c",
                                    "requirements": "PBT has been trained and evaluated in Shadow Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "5ec68d84-872f-4e66-b9f1-f9532101b72f",
                                    "requirements": "The reward of PBT in Shadow Hand task increases steadily. It performs similarly to PPO.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "36ec0a15-9be4-49d5-8787-ebdba34f949b",
                            "requirements": "PQL results were replicated in Shadow Hand. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "49b4225f-984d-4d28-a9cf-5caa3d8407a2",
                                    "requirements": "PQL has been trained and evaluated in Shadow Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                },
                                {
                                    "id": "8c1acd48-8b0e-4b5d-8073-de3db0c72873",
                                    "requirements": "The reward of PQL in Shadow Hand task increases sharply at first and then plateaus. It outperforms both PPO. and PBT, and achieves similar performance as SAPG.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        },
                        {
                            "id": "12e36a12-8dc1-4473-ad7a-86c8fac1ce1e",
                            "requirements": "SAPG results were replicated in Shadow Hand. ",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "4f86c6af-8e3c-4244-91c3-b3aba40a95c3",
                                    "requirements": "SAPG has been trained and evaluated in Shadow Hand task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution",
                                    "finegrained_task_category": "Experimental Setup"
                                },
                                {
                                    "id": "9b79ceec-714e-4002-8377-11a833db4689",
                                    "requirements": "The reward of SAPG in Shadow Hand task increases steadily. It outperforms both PPO. and PBT, and achieves similar performance as PQL.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis",
                                    "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                                }
                            ],
                            "task_category": null,
                            "finegrained_task_category": null
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "050960b0-f4fd-4b2d-ad5f-6e9382f39a01",
            "requirements": "Table 1 has been replicated.",
            "weight": 2,
            "sub_tasks": [
                {
                    "id": "f7440cf3-55da-43fd-a5b4-093c2cb8a563",
                    "requirements": "AllegroHand results from table 1 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "b63c5ff5-aa82-486c-b7ab-c2cdba010e7a",
                            "requirements": "The average reward for PPO was 1.01e4 with a standard error of 6.31e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "33580075-0b95-45bb-9251-52da4510ee7b",
                            "requirements": "The average reward for PBT was 7.28e3 with a standard error of 1.24e3 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "0c8b9796-2fd8-499c-a49d-a388fcf48400",
                            "requirements": "The average reward for PQL was 1.01e4 with a standard error of 5.28e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "9a1f61db-e368-4228-9aae-3f39970e4de2",
                            "requirements": "The average reward for SAPG with entropy coefficient of 0 was 1.23e4 with a standard error of 3.29e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "8a568508-ec25-46a5-9b24-ab13f2820d91",
                            "requirements": "The average reward for SAPG with entropy coefficient of 0.005 was 9.14e3 with a standard error of 8.38e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "bb6200f6-75c5-4f32-bcfb-3b931e6d0117",
                            "requirements": "SAPG with entropy coefficient of 0 is the best performing method.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "7293058f-2781-4dc4-a2f6-1f706ae7e49d",
                    "requirements": "ShadowHand results from table 1 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "2c2a52f0-aff6-4b5e-b33f-95c5bebf7c5b",
                            "requirements": "The average reward for PPO was 1.07e4 with a standard error of 4.90e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "cdca77ff-3541-4044-926c-8100d9272b51",
                            "requirements": "The average reward for PBT was 1.01e4 with a standard error of 1.80e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "e919fe9f-7cd1-4b81-b8c0-7a7d4df7d6f0",
                            "requirements": "The average reward for PQL was 1.28e4 with a standard error of 1.25e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "86a7d4cc-ee31-41c7-9b88-ba978e6b86b4",
                            "requirements": "The average reward for SAPG with entropy coefficient of 0 was 1.17e4 with a standard error of 2.64e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "8e8575f2-d93e-4447-a7f0-8e40441f0ef4",
                            "requirements": "The average reward for SAPG with entropy coefficient of 0.005 was 1.28e4 with a standard error of 2.80e2 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "1eb951c5-8a59-492f-a849-47dc910857e8",
                            "requirements": "SAPG with entropy coefficient of 0.005 is the best performing method.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "ad9c33c8-4604-42ee-8bd1-9b4874ba8026",
                    "requirements": "Regrasping results from table 1 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "28d1c0ab-4435-444e-a7fa-864198bff33b",
                            "requirements": "The average number of successes for PPO was 1.25 with a standard error of 1.15 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "8f9f267a-3787-46af-b5b0-0d8361dcdc9e",
                            "requirements": "The average number of successes for PBT was 31.9 with a standard error of 2.26 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "c7fe1dbb-6064-45b6-826d-0461ce49fa78",
                            "requirements": "The average number of successes for PQL was 2.73 with a standard error of 0.02 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "6e3a8ad2-1210-47e2-a4e0-0839ae6c4415",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0 was 35.7 with a standard error of 1.46 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "23cc6a37-8f86-429d-a66b-cf9401bf65fb",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0.005 was 33.4 with a standard error of 2.25 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "2fa1bea1-4e1b-4eeb-9f12-4f3645f0a2ba",
                            "requirements": "SAPG with entropy coefficient of 0 is the best performing method.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "0d2f16dd-70e6-417a-9024-73c3b46fa87b",
                    "requirements": "Throw results from table 1 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "e55ce7fb-5c79-49dd-83f1-71b2cea1ba5c",
                            "requirements": "The average number of successes for PPO was 16.8 with a standard error of 0.48 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "a891f6c5-1567-4a4b-b8e6-10f7b9b288d5",
                            "requirements": "The average number of successes for PBT was 19.2 with a standard error of 1.07 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "757a9a3f-aec6-465b-be05-6d5b5b66e624",
                            "requirements": "The average number of successes for PQL was 2.62 with a standard error of 0.08 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "8dd86030-c998-47db-a776-55b02bc2ec6e",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0 was 23.7 with a standard error of 0.74 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "8d3d1a09-93e5-4faf-b7a8-a0085ed609b2",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0.005 was 18.7 with a standard error of 0.43 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "0d2b3237-5f84-4ab9-bc77-c38f31c4d55a",
                            "requirements": "SAPG with entropy coefficient of 0 is the best performing method.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "2c61a0a6-6b64-4a7a-8e47-167abe8ed15a",
                    "requirements": "Reorientation results from table 1 have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "54a5ed8e-6a0b-428b-b11b-6e25cee63687",
                            "requirements": "The average number of successes for PPO was 2.85 with a standard error of 0.05 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "ca949fe5-d656-4294-8a34-ba6231f2cbed",
                            "requirements": "The average number of successes for PBT was 23.2 with a standard error of 4.86 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "01475549-724a-4565-91cf-7dadde0b7473",
                            "requirements": "The average number of successes for PQL was 1.66 with a standard error of 0.11 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "f7c78019-2fc6-4e79-865a-061beae18526",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0 was 33.2 with a standard error of 4.20 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "cae067cb-95bc-4206-83a9-69b6fdfd5266",
                            "requirements": "The average number of successes for SAPG with entropy coefficient of 0.005 was 38.6 with a standard error of 0.63 after 2e10 samples.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "7ec5e1ed-21da-4769-b8eb-77ad0488dcc8",
                            "requirements": "SAPG with entropy coefficient of 0.005 is the best performing method.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "94a9c1ec-6512-4f75-8017-2c09654927f0",
            "requirements": "Figure 6 has been replicated.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "3c3946fd-d737-48fe-8b91-11ad1ec0e767",
                    "requirements": "The results for Allegro Kuka Regrasping task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "e5d82530-a420-4f27-b38f-890b0576e2d4",
                            "requirements": "SAPG has been trained and evaluated without off-policy data in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "8c58346a-161b-418d-86e0-30db27cf5a15",
                            "requirements": "SAPG has been trained and evaluated using symmetric off-policy data in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "1dcfdd84-93b6-482c-83b9-8faddb7c55f4",
                            "requirements": "SAPG has been trained and evaluated using high off-policy data ratio in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "12910787-89ca-4548-a6c3-357bd40c296d",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.003 in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "84211932-bb8a-4ca3-a9c0-7fd864da78da",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.005 in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "07a91966-1c5d-48c0-bb66-79ec371a1879",
                            "requirements": "Standard SAPG has been trained and evaluated in Allegro Kuka Regrasping",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "193b0859-6f88-4ce1-b596-12fff30772ff",
                            "requirements": "Training without off-policy data is the worst performing method. Using symmetric off-policy improves things a bit. The other methods all perform significantly better.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "c5e45e8d-3700-4003-93f0-79187066f8bb",
                    "requirements": "The results for the Allegro Kuka Throw task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "128d2bf1-dd3b-4d6d-a1e2-2f79d915ac73",
                            "requirements": "SAPG has been trained and evaluated without off-policy data in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "0edf5ba9-c61d-4074-9ec8-7c78c6c9fbdd",
                            "requirements": "SAPG has been trained and evaluated using symmetric off-policy data in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "3ab7a450-8aef-4ad9-ab8b-25ff06f84858",
                            "requirements": "SAPG has been trained and evaluated using high off-policy data ratio in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "75d8b372-80d8-4e34-b75c-606bc06b917e",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.003 in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "1358faca-0b44-49aa-894f-6c57b199d672",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.005 in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "e87ccb36-20f8-4bbe-bd3f-86a9b8517b40",
                            "requirements": "Standard SAPG has been trained and evaluated in Allegro Kuka Throw",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "74d49bbb-fc77-4f43-890a-eda9c810b440",
                            "requirements": "Training without off-policy data is the worst performing method. All other methods perform a bit better, and standard SAPG is the best performing method.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "210bddcf-0517-4383-94eb-224088b19da7",
                    "requirements": "The results  for the Allegro Kuka Reorientation task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "a64d9d7b-1c5b-4037-a275-9dd37c646acf",
                            "requirements": "SAPG has been trained and evaluated without off-policy data in Allegro Kuka Reorientation task",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "cfb5b8b1-bb67-4098-83d2-e7c001741e07",
                            "requirements": "SAPG has been trained and evaluated using symmetric off-policy data in Allegro Kuka Reorientation task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "7420e98b-5d3b-482b-aac5-55d5d8df956c",
                            "requirements": "SAPG has been trained and evaluated using high off-policy in Allegro Kuka Reorientation task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "40352f5e-b9fa-41b1-b386-bfd6717b8b0f",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.003 in Allegro Kuka Reorientation task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "623dfcd6-ae62-4ce6-89b3-4b0051506fda",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.005 in Allegro Kuka Reorientation task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "856460c8-b9b1-484e-aded-ae66e8feed06",
                            "requirements": "Standard SAPG has been trained and evaluated in Allegro Kuka Reorientation task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "bd416f08-3b17-415b-a140-dbc7ccbde93f",
                            "requirements": "Training without off-policy data is the worst performing method. All other methods perform better, and SAPG using entropy coefficient of 0.005 is the best performing method.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "928f5433-f1f3-4b7e-bc3d-39b9ea1b5f68",
                    "requirements": "The results for the Allegro Hand task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "089e4282-7b03-4139-9bf8-efeb7847b4f4",
                            "requirements": "SAPG has been trained and evaluated without off-policy data in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "d9092acc-258f-48ef-a0ee-f7fc1806a11a",
                            "requirements": "SAPG has been trained and evaluated using symmetric off-policy data in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "5c21bf63-50ad-4638-a3ef-6af9a675f4c0",
                            "requirements": "SAPG has been trained and evaluated using high off-policy in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "6d1e068e-afe6-4abc-8373-4d9654a4a4a8",
                            "requirements": "Standard SAPG has been trained and evaluated in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "00b99a98-0c98-4b8f-ab39-c30a3c4a5fdb",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.003 in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "e14a9452-e4a1-4b27-8701-4937cbaa18eb",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.005 in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "253cc3b2-d656-432b-bf8b-6ad4c4a6a66c",
                            "requirements": "Training without off-policy data is the worst performing method. Using symmetric off-policy and high off-policy data improves results and perform similarly to each other. The best methods are standard SAPG and using entropy coefficient of 0.003.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "9f016b75-506f-4903-b0fb-94ed18e0d819",
                    "requirements": "The results for the Shadow Hand task have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "258af484-b7bb-4d89-8532-ed7feaf93690",
                            "requirements": "SAPG has been trained and evaluated without off-policy data in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "41f1a669-38a4-4e2d-8ea6-f3c0d8aaa6a7",
                            "requirements": "SAPG has been trained and evaluated using symmetric off-policy data in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "ada9a9c5-002d-4ead-9290-81551f332ec4",
                            "requirements": "SAPG has been trained and evaluated using high off-policy in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "9c9b9344-a9fa-4bfb-9cf7-4c60fca6632b",
                            "requirements": "Standard SAPG has been trained and evaluated in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "f2fe516f-6c8c-4147-9265-9988be784a6e",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.005 in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "4584f422-849c-4348-be43-7c923362554d",
                            "requirements": "SAPG has been trained and evaluated using entropy coefficient of 0.003 in Shadow Hand task.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "89ea072a-8a15-4529-b58c-8e0600bd9e88",
                            "requirements": "Training using symmetric off-policy data is the worst performing method. All other methods improves the performance, and the best methods are standard SAPG and using entropy coefficient of 0.003 and 0.005.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "5c9e43a3-90fc-4493-842a-8651e34b494b",
            "requirements": "Figure 7 has been replicated.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "378939a7-a875-4d9f-961d-f3292f16c8aa",
                    "requirements": "Code has been written to either implement or import a pre-existing implementation of PCA.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "42104128-ba3e-4387-b32c-a2b266286c7b",
                    "requirements": "The Allegro Kuka Reorientation plot has been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "2651eef0-98ed-44bd-acb9-a692c8c41778",
                            "requirements": "PCA has been computed for the visited states for PPO and the reconstruction errors calculated for components 1 to 66.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "1b5177e8-c14b-4d59-a6cc-4113d610c999",
                            "requirements": "PCA has been computed for the visited states for a random policy and the reconstruction errors calculated for components 1 to 66.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "02bf6a17-192e-4bfc-b061-0abd6a68c992",
                            "requirements": "PCA has been computed for the visited states for SAPG and the reconstruction errors calculated for components 1 to 66.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "d33b2f75-eb26-42ff-94a0-ff205dc5a38a",
                            "requirements": "The random policy has the smallest reconstruction error for most number of components, and SAPG has the highest reconstruction error for most number of components. All methods have similar reconstruction errors when using more than 25 components.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "3a3e86b3-bd81-4a97-9fa2-b3c6d3e008e6",
                    "requirements": "The Allegro Kuka Regrasping plot has been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "d99ea898-09a5-4681-b654-693764ae9e24",
                            "requirements": "PCA has been computed for the visited states for PPO and the reconstruction errors calculated for components 1 to 56.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "e388762a-858d-42a7-b944-3101fefab2da",
                            "requirements": "PCA has been computed for the visited states for a random policy and the reconstruction errors calculated for components 1 to 56.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "7651abd5-f7f2-45da-90a5-85ec88292ffb",
                            "requirements": "PCA has been computed for the visited states for SAPG and the reconstruction errors calculated for components 1 to 56.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "21885969-e53c-4f34-b9e6-7d1b8961d12f",
                            "requirements": "PPO has the smallest reconstruction error for the first number of components, and the random policy has the highest reconstruction error for the first number of components. SAPG has the highest reconstruction errors  when using more than 6 components. All methods have similar reconstruction errors when using more than 25 components.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "c8e6423c-3005-4ed2-9d76-675c122c7318",
                    "requirements": "The Allegro Kuka Throw plot has been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "a3abcee9-e2c0-443a-b6e5-6eca5ef44269",
                            "requirements": "PCA has been computed for the visited states for PPO and the reconstruction errors calculated for components 1 to 56. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "ec5c9d5e-7db3-40d0-acf1-e69e6f5dad53",
                            "requirements": "PCA has been computed for the visited states for a random policy and the reconstruction errors calculated for components 1 to 56. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "aba141f8-03f6-4c04-b308-342b75516f7d",
                            "requirements": "PCA has been computed for the visited states for SAPG and the reconstruction errors calculated for components 1 to 56. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        },
                        {
                            "id": "8550d48c-e5e1-45ae-ae46-ea9ddcc5f838",
                            "requirements": "The random policy has the smallest reconstruction error when using less than 25 components, and SAPG has the highest reconstruction error for most number of components. All methods have similar reconstruction errors when using more than 25 components.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        },
        {
            "id": "d7e6d42e-fa2b-4bdc-aa2f-b40b7aaa1c87",
            "requirements": "Figure 8 has been replicated.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "33bc9166-c1ec-4412-aa3c-f488ba1a2cdc",
                    "requirements": "Code has been written to implement a neural network that reconstructs the input. The neural network is made up of two layers, and the size of the layers vary from 8 to 64 neurons. The activation function is ReLU, and Adam is used as optimizer. The loss is the L2 reconstruction error of predicted state transitions.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development",
                    "finegrained_task_category": "Method Implementation"
                },
                {
                    "id": "8ca7f1e8-6ce8-4fb0-b191-de8a5c65b4de",
                    "requirements": "Allegro Kuka Reorientation results have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "bf53661b-16f1-4cd5-b41f-ef4702c41e00",
                            "requirements": "The neural network has been trained on state transition from PPO and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "5bc4d623-5c81-4885-82c5-13b4d602487f",
                            "requirements": "The neural network has been trained on state transition from SAPG and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "cf84c344-b6ee-4410-8d91-e7f5eeb5d947",
                            "requirements": "The neural network has been trained on state transition from a random policy and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "217424a8-1097-4bbf-8b18-2b1d765a48b3",
                            "requirements": "The reconstruction error from PPO and SAPG is similar to each other, while the error from the random policy is much smaller. The results indicate higher diversity of states visited in SAPG and PPO, than in a random policy.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "223a96cb-8251-4cfd-ab75-8e605060bf08",
                    "requirements": "Allegro Kuka Regrasping results have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "52327a19-f739-4196-8fa0-cd33cd33052c",
                            "requirements": "The neural network has been trained on state transition from PPO and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "dfe2ed08-7c47-4d46-bc33-2e5bfeb14809",
                            "requirements": "The neural network has been trained on state transition from SAPG and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "d6d6cff2-2e7d-401e-97bf-48e13e0ab859",
                            "requirements": "The neural network has been trained on state transition from a random policy and the reconstruction error caculated.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "ac0d81a5-ef38-4141-800e-451505c7e54c",
                            "requirements": "The reconstruction error from PPO and SAPG is similar to each other, while the error from the random policy is much smaller. The results indicate higher diversity of states visited in SAPG and PPO, than in a random policy.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                },
                {
                    "id": "eeb30329-8be7-41bf-abff-03bc9ab7ad7c",
                    "requirements": "Allegro Kuka Throw results have been replicated.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "1468bf1e-2431-45c4-bfee-79f0d972c1ce",
                            "requirements": "The neural network has been trained on state transition from PPO and the reconstruction error caculated. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Evaluation, Metrics & Benchmarking"
                        },
                        {
                            "id": "fcce8750-c793-4292-8d55-4b074035e2e1",
                            "requirements": "The neural network has been trained on state transition from SAPG and the reconstruction error caculated. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "c266b447-dbe9-4435-849f-df677ceefbe5",
                            "requirements": "The neural network has been trained on state transition from a random policy and the reconstruction error caculated. ",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution",
                            "finegrained_task_category": "Experimental Setup"
                        },
                        {
                            "id": "d1050653-f0e1-4d50-85b9-fed1d65eb5e0",
                            "requirements": "The reconstruction error from PPO and SAPG is similar to each other, while the error from the random policy is much smaller. The results indicate higher diversity of states visited in SAPG and PPO, than in a random policy.",
                            "weight": 2,
                            "sub_tasks": [],
                            "task_category": "Result Analysis",
                            "finegrained_task_category": "Logging, Analysis & Presentation"
                        }
                    ],
                    "task_category": null,
                    "finegrained_task_category": null
                }
            ],
            "task_category": null,
            "finegrained_task_category": null
        }
    ],
    "task_category": null,
    "finegrained_task_category": null
}