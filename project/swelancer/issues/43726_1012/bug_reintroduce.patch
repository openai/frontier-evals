diff --git a/src/components/AttachmentModal.tsx b/src/components/AttachmentModal.tsx
index 8de7f4575e7..32572ef3e55 100644
--- a/src/components/AttachmentModal.tsx
+++ b/src/components/AttachmentModal.tsx
@@ -28,7 +28,6 @@ import ROUTES from '@src/ROUTES';
 import type * as OnyxTypes from '@src/types/onyx';
 import {isEmptyObject} from '@src/types/utils/EmptyObject';
 import type ModalType from '@src/types/utils/ModalType';
-import viewRef from '@src/types/utils/viewRef';
 import AttachmentCarousel from './Attachments/AttachmentCarousel';
 import AttachmentCarouselPagerContext from './Attachments/AttachmentCarousel/Pager/AttachmentCarouselPagerContext';
 import AttachmentView from './Attachments/AttachmentView';
@@ -477,8 +476,6 @@ function AttachmentModal({
         [closeModal, nope, sourceForAttachmentView],
     );
 
-    const submitRef = useRef<View | HTMLElement>(null);
-
     return (
         <>
             <Modal
@@ -502,12 +499,6 @@ function AttachmentModal({
                     }
                 }}
                 propagateSwipe
-                initialFocus={() => {
-                    if (!submitRef.current) {
-                        return false;
-                    }
-                    return submitRef.current;
-                }}
             >
                 <GestureHandlerRootView style={styles.flex1}>
                     {shouldUseNarrowLayout && <HeaderGap />}
@@ -582,7 +573,6 @@ function AttachmentModal({
                             {({safeAreaPaddingBottomStyle}) => (
                                 <Animated.View style={[StyleUtils.fade(confirmButtonFadeAnimation), safeAreaPaddingBottomStyle]}>
                                     <Button
-                                        ref={viewRef(submitRef)}
                                         success
                                         large
                                         style={[styles.buttonConfirm, shouldUseNarrowLayout ? {} : styles.attachmentButtonBigScreen]}
diff --git a/src/components/FocusTrap/FocusTrapForModal/FocusTrapForModalProps.ts b/src/components/FocusTrap/FocusTrapForModal/FocusTrapForModalProps.ts
index 5793885dacd..6bc2350a6c5 100644
--- a/src/components/FocusTrap/FocusTrapForModal/FocusTrapForModalProps.ts
+++ b/src/components/FocusTrap/FocusTrapForModal/FocusTrapForModalProps.ts
@@ -1,11 +1,6 @@
-import type FocusTrap from 'focus-trap-react';
-
-type FocusTrapOptions = Exclude<FocusTrap.Props['focusTrapOptions'], undefined>;
-
 type FocusTrapForModalProps = {
     children: React.ReactNode;
     active: boolean;
-    initialFocus?: FocusTrapOptions['initialFocus'];
 };
 
 export default FocusTrapForModalProps;
diff --git a/src/components/FocusTrap/FocusTrapForModal/index.web.tsx b/src/components/FocusTrap/FocusTrapForModal/index.web.tsx
index 2608c58a4d2..00dcedd32aa 100644
--- a/src/components/FocusTrap/FocusTrapForModal/index.web.tsx
+++ b/src/components/FocusTrap/FocusTrapForModal/index.web.tsx
@@ -4,14 +4,14 @@ import sharedTrapStack from '@components/FocusTrap/sharedTrapStack';
 import ReportActionComposeFocusManager from '@libs/ReportActionComposeFocusManager';
 import type FocusTrapForModalProps from './FocusTrapForModalProps';
 
-function FocusTrapForModal({children, active, initialFocus = false}: FocusTrapForModalProps) {
+function FocusTrapForModal({children, active}: FocusTrapForModalProps) {
     return (
         <FocusTrap
             active={active}
             focusTrapOptions={{
                 trapStack: sharedTrapStack,
                 clickOutsideDeactivates: true,
-                initialFocus,
+                initialFocus: false,
                 fallbackFocus: document.body,
                 setReturnFocus: (element) => {
                     if (ReportActionComposeFocusManager.isFocused()) {
diff --git a/src/components/HeaderWithBackButton/index.tsx b/src/components/HeaderWithBackButton/index.tsx
index eb04ad5540e..9052fc4b7c3 100755
--- a/src/components/HeaderWithBackButton/index.tsx
+++ b/src/components/HeaderWithBackButton/index.tsx
@@ -1,4 +1,4 @@
-import React, {useMemo} from 'react';
+import React, {useMemo, useRef, useEffect} from 'react';
 import {Keyboard, StyleSheet, View} from 'react-native';
 import Avatar from '@components/Avatar';
 import AvatarWithDisplayName from '@components/AvatarWithDisplayName';
@@ -129,6 +129,14 @@ function HeaderWithBackButton({
         translate,
     ]);
 
+    const closeButtonRef = useRef<HTMLButtonElement>(null);
+
+    useEffect(() => {
+        if (shouldShowCloseButton && closeButtonRef.current) {
+            closeButtonRef.current.focus();
+        }
+    }, [shouldShowCloseButton]);
+
     return (
         <View
             // Hover on some part of close icons will not work on Electron if dragArea is true
@@ -251,6 +259,7 @@ function HeaderWithBackButton({
                     {shouldShowCloseButton && (
                         <Tooltip text={translate('common.close')}>
                             <PressableWithoutFeedback
+                                ref={closeButtonRef}
                                 onPress={onCloseButtonPress}
                                 style={[styles.touchableButtonImage]}
                                 role={CONST.ROLE.BUTTON}
diff --git a/src/components/Modal/BaseModal.tsx b/src/components/Modal/BaseModal.tsx
index f51fe7e37ac..0d09b8b3b93 100644
--- a/src/components/Modal/BaseModal.tsx
+++ b/src/components/Modal/BaseModal.tsx
@@ -52,7 +52,6 @@ function BaseModal(
         shouldEnableNewFocusManagement = false,
         restoreFocusType,
         shouldUseModalPaddingStyle = true,
-        initialFocus = false,
     }: BaseModalProps,
     ref: React.ForwardedRef<View>,
 ) {
@@ -266,7 +265,6 @@ function BaseModal(
                         <PortalHost name="modal" />
                         <FocusTrapForModal
                             active={isVisible}
-                            initialFocus={initialFocus}
                         >
                             <View
                                 style={[styles.defaultModalContainer, modalPaddingStyles, modalContainerStyle, !isVisible && styles.pointerEventsNone]}
diff --git a/src/components/Modal/types.ts b/src/components/Modal/types.ts
index 6ced829e93d..4971932b69c 100644
--- a/src/components/Modal/types.ts
+++ b/src/components/Modal/types.ts
@@ -1,11 +1,8 @@
-import type FocusTrap from 'focus-trap-react';
 import type {ViewStyle} from 'react-native';
 import type {ModalProps} from 'react-native-modal';
 import type {ValueOf} from 'type-fest';
 import type CONST from '@src/CONST';
 
-type FocusTrapOptions = Exclude<FocusTrap.Props['focusTrapOptions'], undefined>;
-
 type PopoverAnchorPosition = {
     top?: number;
     right?: number;
@@ -90,9 +87,6 @@ type BaseModalProps = Partial<ModalProps> & {
 
     /** Should we apply padding style in modal itself. If this value is false, we will handle it in ScreenWrapper */
     shouldUseModalPaddingStyle?: boolean;
-
-    /** Used to set the element that should receive the initial focus */
-    initialFocus?: FocusTrapOptions['initialFocus'];
 };
 
 export default BaseModalProps;
