diff --git a/src/components/PopoverWithoutOverlay/index.tsx b/src/components/PopoverWithoutOverlay/index.tsx
index 7d58ad6d22b..5c9825280be 100644
--- a/src/components/PopoverWithoutOverlay/index.tsx
+++ b/src/components/PopoverWithoutOverlay/index.tsx
@@ -1,5 +1,5 @@
 import type {ForwardedRef} from 'react';
-import React, {forwardRef, useContext, useEffect, useMemo} from 'react';
+import React, {forwardRef, useContext, useRef, useEffect, useMemo} from 'react';
 import {View} from 'react-native';
 import ColorSchemeWrapper from '@components/ColorSchemeWrapper';
 import {PopoverContext} from '@components/PopoverProvider';
@@ -7,6 +7,7 @@ import useSafeAreaInsets from '@hooks/useSafeAreaInsets';
 import useStyleUtils from '@hooks/useStyleUtils';
 import useThemeStyles from '@hooks/useThemeStyles';
 import useWindowDimensions from '@hooks/useWindowDimensions';
+import usePrevious from '@hooks/usePrevious';
 import variables from '@styles/variables';
 import * as Modal from '@userActions/Modal';
 import viewRef from '@src/types/utils/viewRef';
@@ -44,9 +45,10 @@ function PopoverWithoutOverlay(
             innerContainerStyle,
             outerStyle,
         );
+    const firstRenderRef = useRef(true);
+    const prevIsVisible = usePrevious(isVisible);
 
     useEffect(() => {
-        let removeOnClose: () => void;
         if (isVisible) {
             onModalShow();
             onOpen?.({
@@ -54,23 +56,25 @@ function PopoverWithoutOverlay(
                 close: onClose,
                 anchorRef,
             });
-            removeOnClose = Modal.setCloseModal(onClose);
         } else {
             onModalHide();
             close(anchorRef);
             Modal.onModalDidClose();
         }
-        Modal.willAlertModalBecomeVisible(isVisible, true);
+        Modal.willAlertModalBecomeVisible(isVisible);
+
+        // We prevent setting closeModal function to null when the component is invisible the first time it is rendered
+        if (prevIsVisible === isVisible && (!firstRenderRef.current || !isVisible)) {
+            firstRenderRef.current = false;
+            return;
+        }
+        firstRenderRef.current = false;
+        Modal.setCloseModal(isVisible ? () => onClose(anchorRef) : null);
+
 
-        return () => {
-            if (!removeOnClose) {
-                return;
-            }
-            removeOnClose();
-        };
         // We want this effect to run strictly ONLY when isVisible prop changes
         // eslint-disable-next-line react-compiler/react-compiler, react-hooks/exhaustive-deps
-    }, [isVisible]);
+    }, [isVisible, prevIsVisible]);
 
     const {
         paddingTop: safeAreaPaddingTop,
diff --git a/src/libs/actions/Report.ts b/src/libs/actions/Report.ts
index 0fe2bfbf8d4..af9bc2a473b 100644
--- a/src/libs/actions/Report.ts
+++ b/src/libs/actions/Report.ts
@@ -1535,8 +1535,6 @@ function deleteReportComment(reportID: string, reportAction: ReportAction) {
 
     CachedPDFPaths.clearByKey(reportActionID);
 
-    API.write(WRITE_COMMANDS.DELETE_COMMENT, parameters, {optimisticData, successData, failureData});
-
     // if we are linking to the report action, and we are deleting it, and it's not a deleted parent action,
     // we should navigate to its report in order to not show not found page
     if (Navigation.isActiveRoute(ROUTES.REPORT_WITH_ID.getRoute(reportID, reportActionID)) && !isDeletedParentAction) {
diff --git a/src/pages/home/report/ContextMenu/PopoverReportActionContextMenu.tsx b/src/pages/home/report/ContextMenu/PopoverReportActionContextMenu.tsx
index ded25ee1f21..3750de91b57 100644
--- a/src/pages/home/report/ContextMenu/PopoverReportActionContextMenu.tsx
+++ b/src/pages/home/report/ContextMenu/PopoverReportActionContextMenu.tsx
@@ -278,7 +278,6 @@ function PopoverReportActionContextMenu(_props: unknown, ref: ForwardedRef<Repor
         }
 
         DeviceEventEmitter.emit(`deletedReportAction_${reportIDRef.current}`, reportAction?.reportActionID);
-        setIsDeleteCommentConfirmModalVisible(false);
     }, []);
 
     const hideDeleteModal = () => {
