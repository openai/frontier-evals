diff --git a/src/CONST.ts b/src/CONST.ts
index 4ca9b45f13d..019a274d1f9 100755
--- a/src/CONST.ts
+++ b/src/CONST.ts
@@ -153,16 +153,6 @@ type OnboardingMessageType = {
 };
 
 const CONST = {
-    HEIC_SIGNATURES: [
-        '6674797068656963', // 'ftypheic' - Indicates standard HEIC file
-        '6674797068656978', // 'ftypheix' - Indicates a variation of HEIC
-        '6674797068657631', // 'ftyphevc' - Typically for HEVC encoded media (common in HEIF)
-        '667479706d696631', // 'ftypmif1' - Multi-Image Format part of HEIF, broader usage
-    ],
-    RECENT_WAYPOINTS_NUMBER: 20,
-    DEFAULT_DB_NAME: 'OnyxDB',
-    DEFAULT_TABLE_NAME: 'keyvaluepairs',
-    DEFAULT_ONYX_DUMP_FILE_NAME: 'onyx-state.txt',
     DEFAULT_POLICY_ROOM_CHAT_TYPES: [chatTypes.POLICY_ADMINS, chatTypes.POLICY_ANNOUNCE, chatTypes.DOMAIN_ALL],
     DISABLED_MAX_EXPENSE_VALUE: 10000000000,
     POLICY_BILLABLE_MODES: {
diff --git a/src/languages/en.ts b/src/languages/en.ts
index 6d579a2af2d..947d13e2353 100755
--- a/src/languages/en.ts
+++ b/src/languages/en.ts
@@ -1184,10 +1184,6 @@ const translations = {
             deviceCredentials: 'Device credentials',
             invalidate: 'Invalidate',
             destroy: 'Destroy',
-            maskExportOnyxStateData: 'Mask fragile user data while exporting Onyx state',
-            exportOnyxState: 'Export Onyx state',
-            testCrash: 'Test crash',
-            debugMode: 'Debug mode',
         },
         debugConsole: {
             saveLog: 'Save log',
diff --git a/src/languages/es.ts b/src/languages/es.ts
index cb19b091b05..585efda3c8c 100644
--- a/src/languages/es.ts
+++ b/src/languages/es.ts
@@ -1179,10 +1179,6 @@ const translations = {
             deviceCredentials: 'Credenciales del dispositivo',
             invalidate: 'Invalidar',
             destroy: 'Destruir',
-            maskExportOnyxStateData: 'Enmascare los datos frágiles del usuario mientras exporta el estado Onyx',
-            exportOnyxState: 'Exportar estado Onyx',
-            testCrash: 'Prueba de fallo',
-            debugMode: 'Modo depuración',
         },
         debugConsole: {
             saveLog: 'Guardar registro',
diff --git a/src/libs/ExportOnyxState/common.ts b/src/libs/ExportOnyxState/common.ts
deleted file mode 100644
index 564db322930..00000000000
--- a/src/libs/ExportOnyxState/common.ts
+++ /dev/null
@@ -1,65 +0,0 @@
-import {Str} from 'expensify-common';
-import ONYXKEYS from '@src/ONYXKEYS';
-import type {Session} from '@src/types/onyx';
-
-const MASKING_PATTERN = '***';
-
-const maskSessionDetails = (data: Record<string, unknown>): Record<string, unknown> => {
-    const session = data.session as Session;
-    const maskedData: Record<string, unknown> = {};
-
-    Object.keys(session).forEach((key) => {
-        if (key !== 'authToken' && key !== 'encryptedAuthToken') {
-            maskedData[key] = session[key as keyof Session];
-            return;
-        }
-        maskedData[key] = MASKING_PATTERN;
-    });
-
-    return {
-        ...data,
-        session: maskedData,
-    };
-};
-
-const maskFragileData = (data: Record<string, unknown>, parentKey?: string): Record<string, unknown> => {
-    const maskedData: Record<string, unknown> = {};
-
-    if (!data) {
-        return maskedData;
-    }
-
-    Object.keys(data).forEach((key) => {
-        if (!Object.prototype.hasOwnProperty.call(data, key)) {
-            return;
-        }
-
-        const value = data[key];
-
-        if (typeof value === 'string' && Str.isValidEmail(value)) {
-            maskedData[key] = MASKING_PATTERN;
-        } else if (parentKey && parentKey.includes(ONYXKEYS.COLLECTION.REPORT_ACTIONS) && (key === 'text' || key === 'html')) {
-            maskedData[key] = MASKING_PATTERN;
-        } else if (typeof value === 'object') {
-            maskedData[key] = maskFragileData(value as Record<string, unknown>, key.includes(ONYXKEYS.COLLECTION.REPORT_ACTIONS) ? key : parentKey);
-        } else {
-            maskedData[key] = value;
-        }
-    });
-
-    return maskedData;
-};
-
-const maskOnyxState = (data: Record<string, unknown>, isMaskingFragileDataEnabled?: boolean) => {
-    let onyxState = data;
-    // Mask session details by default
-    onyxState = maskSessionDetails(onyxState);
-    // Mask fragile data other than session details if the user has enabled the option
-    if (isMaskingFragileDataEnabled) {
-        onyxState = maskFragileData(onyxState);
-    }
-
-    return onyxState;
-};
-
-export default {maskOnyxState};
diff --git a/src/libs/ExportOnyxState/index.native.ts b/src/libs/ExportOnyxState/index.native.ts
deleted file mode 100644
index 2ad9af0bf54..00000000000
--- a/src/libs/ExportOnyxState/index.native.ts
+++ /dev/null
@@ -1,45 +0,0 @@
-import RNFS from 'react-native-fs';
-import {open} from 'react-native-quick-sqlite';
-import Share from 'react-native-share';
-import CONST from '@src/CONST';
-import ExportOnyxState from './common';
-
-const readFromOnyxDatabase = () =>
-    new Promise((resolve) => {
-        const db = open({name: CONST.DEFAULT_DB_NAME});
-        const query = `SELECT * FROM ${CONST.DEFAULT_TABLE_NAME}`;
-
-        db.executeAsync(query, []).then(({rows}) => {
-            // eslint-disable-next-line no-underscore-dangle
-            const result = rows?._array.reduce<Record<string, unknown>>((acc, row) => {
-                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
-                acc[row?.record_key] = JSON.parse(row?.valueJSON as string) as unknown;
-                return acc;
-            }, {});
-            resolve(result);
-        });
-    });
-
-const shareAsFile = (value: string) => {
-    try {
-        // Define new filename and path for the app info file
-        const infoFileName = CONST.DEFAULT_ONYX_DUMP_FILE_NAME;
-        const infoFilePath = `${RNFS.DocumentDirectoryPath}/${infoFileName}`;
-        const actualInfoFile = `file://${infoFilePath}`;
-
-        RNFS.writeFile(infoFilePath, value, 'utf8').then(() => {
-            Share.open({
-                url: actualInfoFile,
-                failOnCancel: false,
-            });
-        });
-    } catch (error) {
-        console.error('Error renaming and sharing file:', error);
-    }
-};
-
-export default {
-    maskOnyxState: ExportOnyxState.maskOnyxState,
-    readFromOnyxDatabase,
-    shareAsFile,
-};
diff --git a/src/libs/ExportOnyxState/index.ts b/src/libs/ExportOnyxState/index.ts
deleted file mode 100644
index 66fa6744ecd..00000000000
--- a/src/libs/ExportOnyxState/index.ts
+++ /dev/null
@@ -1,50 +0,0 @@
-import CONST from '@src/CONST';
-import ExportOnyxState from './common';
-
-const readFromOnyxDatabase = () =>
-    new Promise<Record<string, unknown>>((resolve) => {
-        let db: IDBDatabase;
-        const openRequest = indexedDB.open(CONST.DEFAULT_DB_NAME);
-        openRequest.onsuccess = () => {
-            db = openRequest.result;
-            const transaction = db.transaction(CONST.DEFAULT_TABLE_NAME);
-            const objectStore = transaction.objectStore(CONST.DEFAULT_TABLE_NAME);
-            const cursor = objectStore.openCursor();
-
-            const queryResult: Record<string, unknown> = {};
-
-            cursor.onerror = () => {
-                console.error('Error reading cursor');
-            };
-
-            cursor.onsuccess = (event) => {
-                const {result} = event.target as IDBRequest<IDBCursorWithValue>;
-                if (result) {
-                    queryResult[result.primaryKey as string] = result.value;
-                    result.continue();
-                } else {
-                    // no results mean the cursor has reached the end of the data
-                    resolve(queryResult);
-                }
-            };
-        };
-    });
-
-const shareAsFile = (value: string) => {
-    const element = document.createElement('a');
-    element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(value)}`);
-    element.setAttribute('download', CONST.DEFAULT_ONYX_DUMP_FILE_NAME);
-
-    element.style.display = 'none';
-    document.body.appendChild(element);
-
-    element.click();
-
-    document.body.removeChild(element);
-};
-
-export default {
-    maskOnyxState: ExportOnyxState.maskOnyxState,
-    readFromOnyxDatabase,
-    shareAsFile,
-};
diff --git a/src/pages/settings/Troubleshoot/TroubleshootPage.tsx b/src/pages/settings/Troubleshoot/TroubleshootPage.tsx
index c7c2ca956ae..023abbaec55 100644
--- a/src/pages/settings/Troubleshoot/TroubleshootPage.tsx
+++ b/src/pages/settings/Troubleshoot/TroubleshootPage.tsx
@@ -1,4 +1,4 @@
-import React, {useCallback, useMemo, useState} from 'react';
+import React, {useMemo, useState} from 'react';
 import {View} from 'react-native';
 import Onyx, {useOnyx} from 'react-native-onyx';
 import type {SvgProps} from 'react-native-svg';
@@ -12,9 +12,6 @@ import MenuItemList from '@components/MenuItemList';
 import ScreenWrapper from '@components/ScreenWrapper';
 import ScrollView from '@components/ScrollView';
 import Section from '@components/Section';
-import Switch from '@components/Switch';
-import TestToolMenu from '@components/TestToolMenu';
-import TestToolRow from '@components/TestToolRow';
 import Text from '@components/Text';
 import TextLink from '@components/TextLink';
 import useEnvironment from '@hooks/useEnvironment';
@@ -22,9 +19,7 @@ import useLocalize from '@hooks/useLocalize';
 import useResponsiveLayout from '@hooks/useResponsiveLayout';
 import useThemeStyles from '@hooks/useThemeStyles';
 import useWaitForNavigation from '@hooks/useWaitForNavigation';
-import {setShouldMaskOnyxState} from '@libs/actions/MaskOnyx';
-import * as PersistedRequests from '@libs/actions/PersistedRequests';
-import ExportOnyxState from '@libs/ExportOnyxState';
+import useWindowDimensions from '@hooks/useWindowDimensions';
 import Navigation from '@libs/Navigation/Navigation';
 import * as App from '@userActions/App';
 import * as Report from '@userActions/Report';
@@ -48,16 +43,6 @@ function TroubleshootPage() {
     const {shouldUseNarrowLayout} = useResponsiveLayout();
     const illustrationStyle = getLightbulbIllustrationStyle();
 
-    const [shouldStoreLogs] = useOnyx(ONYXKEYS.SHOULD_STORE_LOGS);
-    const [shouldMaskOnyxState = true] = useOnyx(ONYXKEYS.SHOULD_MASK_ONYX_STATE);
-
-    const exportOnyxState = useCallback(() => {
-        ExportOnyxState.readFromOnyxDatabase().then((value: Record<string, unknown>) => {
-            const dataToShare = ExportOnyxState.maskOnyxState(value, shouldMaskOnyxState);
-            ExportOnyxState.shareAsFile(JSON.stringify(dataToShare));
-        });
-    }, [shouldMaskOnyxState]);
-
     const menuItems = useMemo(() => {
         const debugConsoleItem: BaseMenuItem = {
             translationKey: 'initialSettingsPage.troubleshoot.viewConsole',
@@ -71,16 +56,8 @@ function TroubleshootPage() {
                 icon: Expensicons.RotateLeft,
                 action: () => setIsConfirmationModalVisible(true),
             },
-            {
-                translationKey: 'initialSettingsPage.troubleshoot.exportOnyxState',
-                icon: Expensicons.Download,
-                action: exportOnyxState,
-            },
         ];
 
-        if (shouldStoreLogs) {
-            baseMenuItems.push(debugConsoleItem);
-        }
 
         return baseMenuItems
             .map((item) => ({
@@ -91,7 +68,7 @@ function TroubleshootPage() {
                 wrapperStyle: [styles.sectionMenuItemTopDescription],
             }))
             .reverse();
-    }, [waitForNavigate, exportOnyxState, shouldStoreLogs, translate, styles.sectionMenuItemTopDescription]);
+    }, [translate, waitForNavigate, styles.sectionMenuItemTopDescription]);
 
     return (
         <ScreenWrapper
@@ -132,23 +109,11 @@ function TroubleshootPage() {
                         <View style={[styles.flex1, styles.mt5]}>
                             <View>
                                 <ClientSideLoggingToolMenu />
-                                <TestToolRow title={translate('initialSettingsPage.troubleshoot.maskExportOnyxStateData')}>
-                                    <Switch
-                                        accessibilityLabel={translate('initialSettingsPage.troubleshoot.maskExportOnyxStateData')}
-                                        isOn={shouldMaskOnyxState}
-                                        onToggle={setShouldMaskOnyxState}
-                                    />
-                                </TestToolRow>
                             </View>
                             <MenuItemList
                                 menuItems={menuItems}
                                 shouldUseSingleExecution
                             />
-                            {!isProduction && (
-                                <View style={[styles.mt6]}>
-                                    <TestToolMenu />
-                                </View>
-                            )}
                             <ConfirmModal
                                 title={translate('common.areYouSure')}
                                 isVisible={isConfirmationModalVisible}
