 diff --git a/src/pages/iou/request/step/IOURequestStepCurrency.tsx b/src/pages/iou/request/step/IOURequestStepCurrency.tsx
index c48bf91986f..d968d14778f 100644
--- a/src/pages/iou/request/step/IOURequestStepCurrency.tsx
+++ b/src/pages/iou/request/step/IOURequestStepCurrency.tsx
@@ -1,9 +1,11 @@
-import React from 'react';
+import {Str} from 'expensify-common';
+import React, {useMemo, useState} from 'react';
 import {Keyboard} from 'react-native';
 import {withOnyx} from 'react-native-onyx';
 import type {OnyxEntry} from 'react-native-onyx';
-import CurrencySelectionList from '@components/CurrencySelectionList';
-import type {CurrencyListItem} from '@components/CurrencySelectionList/types';
+import SelectionList from '@components/SelectionList';
+import RadioListItem from '@components/SelectionList/RadioListItem';
+import type {ListItem} from '@components/SelectionList/types';
 import useLocalize from '@hooks/useLocalize';
 import * as CurrencyUtils from '@libs/CurrencyUtils';
 import Navigation from '@libs/Navigation/Navigation';
@@ -13,12 +15,15 @@ import * as IOU from '@userActions/IOU';
 import CONST from '@src/CONST';
 import ONYXKEYS from '@src/ONYXKEYS';
 import type SCREENS from '@src/SCREENS';
-import type {Transaction} from '@src/types/onyx';
+import type {CurrencyList, Transaction} from '@src/types/onyx';
 import StepScreenWrapper from './StepScreenWrapper';
 import withFullTransactionOrNotFound from './withFullTransactionOrNotFound';
 import type {WithFullTransactionOrNotFoundProps} from './withFullTransactionOrNotFound';
 
 type IOURequestStepCurrencyOnyxProps = {
+    /** Constant, list of available currencies */
+    currencyList: OnyxEntry<CurrencyList>;
+
     /** The draft transaction object being modified in Onyx */
     draftTransaction: OnyxEntry<Transaction>;
     /** List of recently used currencies */
@@ -27,7 +32,13 @@ type IOURequestStepCurrencyOnyxProps = {
 
 type IOURequestStepCurrencyProps = IOURequestStepCurrencyOnyxProps & WithFullTransactionOrNotFoundProps<typeof SCREENS.MONEY_REQUEST.STEP_CURRENCY>;
 
+type CurrencyListItem = ListItem & {
+    currencyName: string;
+    currencyCode: string;
+};
+
 function IOURequestStepCurrency({
+    currencyList,
     route: {
         params: {backTo, pageIndex, transactionID, action, currency: selectedCurrency = ''},
     },
@@ -35,6 +46,7 @@ function IOURequestStepCurrency({
     recentlyUsedCurrencies,
 }: IOURequestStepCurrencyProps) {
     const {translate} = useLocalize();
+    const [searchValue, setSearchValue] = useState('');
     const {currency: originalCurrency = ''} = ReportUtils.getTransactionDetails(draftTransaction) ?? {};
     const currency = CurrencyUtils.isValidCurrencyCode(selectedCurrency) ? selectedCurrency : originalCurrency;
 
@@ -63,6 +75,35 @@ function IOURequestStepCurrency({
         Navigation.setNavigationActionToMicrotaskQueue(() => navigateBack(option.currencyCode));
     };
 
+    const {sections, headerMessage, initiallyFocusedOptionKey} = useMemo(() => {
+        const currencyOptions: CurrencyListItem[] = Object.entries(currencyList ?? {}).map(([currencyCode, currencyInfo]) => {
+            const isSelectedCurrency = currencyCode === currency.toUpperCase();
+            return {
+                currencyName: currencyInfo?.name ?? '',
+                text: `${currencyCode} - ${CurrencyUtils.getLocalizedCurrencySymbol(currencyCode)}`,
+                currencyCode,
+                keyForList: currencyCode,
+                isSelected: isSelectedCurrency,
+            };
+        });
+
+        const searchRegex = new RegExp(Str.escapeForRegExp(searchValue.trim()), 'i');
+        const filteredCurrencies = currencyOptions.filter((currencyOption) => searchRegex.test(currencyOption.text ?? '') || searchRegex.test(currencyOption.currencyName));
+        const isEmpty = searchValue.trim() && !filteredCurrencies.length;
+
+        return {
+            initiallyFocusedOptionKey: filteredCurrencies.find((filteredCurrency) => filteredCurrency.currencyCode === currency.toUpperCase())?.keyForList,
+            sections: isEmpty
+                ? []
+                : [
+                      {
+                          data: filteredCurrencies,
+                      },
+                  ],
+            headerMessage: isEmpty ? translate('common.noResultsFound') : '',
+        };
+    }, [currencyList, searchValue, currency, translate]);
+
     return (
         <StepScreenWrapper
             headerTitle={translate('common.selectCurrency')}
@@ -72,16 +113,21 @@ function IOURequestStepCurrency({
             includeSafeAreaPaddingBottom={false}
         >
             {({didScreenTransitionEnd}) => (
-                <CurrencySelectionList
-                    recentlyUsedCurrencies={recentlyUsedCurrencies ?? []}
-                    searchInputLabel={translate('common.search')}
-                    onSelect={(option: CurrencyListItem) => {
+                <SelectionList
+                    sections={sections}
+                    ListItem={RadioListItem}
+                    textInputLabel={translate('common.search')}
+                    textInputValue={searchValue}
+                    onChangeText={setSearchValue}
+                    onSelectRow={(option) => {
                         if (!didScreenTransitionEnd) {
                             return;
                         }
                         confirmCurrencySelection(option);
                     }}
-                    initiallySelectedCurrencyCode={currency.toUpperCase()}
+                    headerMessage={headerMessage}
+                    initiallyFocusedOptionKey={initiallyFocusedOptionKey}
+                    showScrollIndicator
                 />
             )}
         </StepScreenWrapper>
@@ -91,6 +137,7 @@ function IOURequestStepCurrency({
 IOURequestStepCurrency.displayName = 'IOURequestStepCurrency';
 
 const IOURequestStepCurrencyWithOnyx = withOnyx<IOURequestStepCurrencyProps, IOURequestStepCurrencyOnyxProps>({
+    currencyList: {key: ONYXKEYS.CURRENCY_LIST},
     draftTransaction: {
         key: ({route}) => {
             const transactionID = route?.params?.transactionID ?? -1;
diff --git a/src/pages/workspace/WorkspaceProfileCurrencyPage.tsx b/src/pages/workspace/WorkspaceProfileCurrencyPage.tsx
index 85d66db58a8..b4d6daa5cb3 100644
--- a/src/pages/workspace/WorkspaceProfileCurrencyPage.tsx
+++ b/src/pages/workspace/WorkspaceProfileCurrencyPage.tsx
@@ -1,26 +1,74 @@
-import React from 'react';
-import CurrencySelectionList from '@components/CurrencySelectionList';
-import type {CurrencyListItem} from '@components/CurrencySelectionList/types';
+import React, {useState} from 'react';
+import type {OnyxEntry} from 'react-native-onyx';
+import {withOnyx} from 'react-native-onyx';
 import HeaderWithBackButton from '@components/HeaderWithBackButton';
 import ScreenWrapper from '@components/ScreenWrapper';
+import SelectionList from '@components/SelectionList';
+import RadioListItem from '@components/SelectionList/RadioListItem';
 import useLocalize from '@hooks/useLocalize';
 import Navigation from '@libs/Navigation/Navigation';
 import * as PolicyUtils from '@libs/PolicyUtils';
 import * as Policy from '@userActions/Policy/Policy';
 import CONST from '@src/CONST';
+import ONYXKEYS from '@src/ONYXKEYS';
+import type {CurrencyList} from '@src/types/onyx';
 import {isEmptyObject} from '@src/types/utils/EmptyObject';
 import AccessOrNotFoundWrapper from './AccessOrNotFoundWrapper';
 import type {WithPolicyAndFullscreenLoadingProps} from './withPolicyAndFullscreenLoading';
 import withPolicyAndFullscreenLoading from './withPolicyAndFullscreenLoading';
 
-type WorkspaceProfileCurrencyPageProps = WithPolicyAndFullscreenLoadingProps;
+type WorkspaceProfileCurrentPageOnyxProps = {
+    /** Constant, list of available currencies */
+    currencyList: OnyxEntry<CurrencyList>;
+};
 
-function WorkspaceProfileCurrencyPage({policy}: WorkspaceProfileCurrencyPageProps) {
+type WorkspaceProfileCurrentPageProps = WithPolicyAndFullscreenLoadingProps & WorkspaceProfileCurrentPageOnyxProps;
+
+type WorkspaceProfileCurrencyPageSectionItem = {
+    text: string;
+    keyForList: string;
+    isSelected: boolean;
+};
+
+const getDisplayText = (currencyCode: string, currencySymbol: string) => `${currencyCode} - ${currencySymbol}`;
+
+function WorkspaceProfileCurrencyPage({currencyList = {}, policy}: WorkspaceProfileCurrentPageProps) {
     const {translate} = useLocalize();
+    const [searchText, setSearchText] = useState('');
+    const trimmedText = searchText.trim().toLowerCase();
+    const currencyListKeys = Object.keys(currencyList ?? {});
+
+    const filteredItems = currencyListKeys.filter((currencyCode: string) => {
+        const currency = currencyList?.[currencyCode];
+        return getDisplayText(currencyCode, currency?.symbol ?? '')
+            .toLowerCase()
+            .includes(trimmedText);
+    });
+
+    let initiallyFocusedOptionKey;
+
+    const currencyItems: WorkspaceProfileCurrencyPageSectionItem[] = filteredItems.map((currencyCode: string) => {
+        const currency = currencyList?.[currencyCode];
+        const isSelected = policy?.outputCurrency === currencyCode;
+
+        if (isSelected) {
+            initiallyFocusedOptionKey = currencyCode;
+        }
+
+        return {
+            text: getDisplayText(currencyCode, currency?.symbol ?? ''),
+            keyForList: currencyCode,
+            isSelected,
+        };
+    });
+
+    const sections = [{data: currencyItems}];
+
+    const headerMessage = searchText.trim() && !currencyItems.length ? translate('common.noResultsFound') : '';
 
-    const onSelectCurrency = (item: CurrencyListItem) => {
-        Policy.updateGeneralSettings(policy?.id ?? '-1', policy?.name ?? '', item.currencyCode);
-        Navigation.setNavigationActionToMicrotaskQueue(Navigation.goBack);
+    const onSelectCurrency = (item: WorkspaceProfileCurrencyPageSectionItem) => {
+        Policy.updateGeneralSettings(policy?.id ?? '', policy?.name ?? '', item.keyForList);
+        Navigation.goBack();
     };
 
     return (
@@ -38,10 +86,16 @@ function WorkspaceProfileCurrencyPage({policy}: WorkspaceProfileCurrencyPageProp
                     onBackButtonPress={() => Navigation.goBack()}
                 />
 
-                <CurrencySelectionList
-                    searchInputLabel={translate('workspace.editor.currencyInputLabel')}
-                    onSelect={onSelectCurrency}
-                    initiallySelectedCurrencyCode={policy?.outputCurrency}
+                <SelectionList
+                    sections={sections}
+                    ListItem={RadioListItem}
+                    textInputLabel={translate('workspace.editor.currencyInputLabel')}
+                    textInputValue={searchText}
+                    onChangeText={setSearchText}
+                    onSelectRow={onSelectCurrency}
+                    headerMessage={headerMessage}
+                    initiallyFocusedOptionKey={initiallyFocusedOptionKey}
+                    showScrollIndicator
                 />
             </ScreenWrapper>
         </AccessOrNotFoundWrapper>
@@ -50,4 +104,8 @@ function WorkspaceProfileCurrencyPage({policy}: WorkspaceProfileCurrencyPageProp
 
 WorkspaceProfileCurrencyPage.displayName = 'WorkspaceProfileCurrencyPage';
 
-export default withPolicyAndFullscreenLoading(WorkspaceProfileCurrencyPage);
+export default withPolicyAndFullscreenLoading(
+    withOnyx<WorkspaceProfileCurrentPageProps, WorkspaceProfileCurrentPageOnyxProps>({
+        currencyList: {key: ONYXKEYS.CURRENCY_LIST},
+    })(WorkspaceProfileCurrencyPage),
+);
