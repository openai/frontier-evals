diff --git a/.npmrc b/.npmrc
deleted file mode 100644
index b6f27f13595..00000000000
--- a/.npmrc
+++ /dev/null
@@ -1 +0,0 @@
-engine-strict=true
diff --git a/src/components/EmojiPicker/EmojiPickerMenu/index.tsx b/src/components/EmojiPicker/EmojiPickerMenu/index.tsx
index d6c1e1f9255..108bd9db2cb 100755
--- a/src/components/EmojiPicker/EmojiPickerMenu/index.tsx
+++ b/src/components/EmojiPicker/EmojiPickerMenu/index.tsx
@@ -104,7 +104,7 @@ function EmojiPickerMenu({onEmojiSelected, activeEmoji}: EmojiPickerMenuProps, r
         initialFocusedIndex: -1,
         disableCyclicTraversal: true,
         onFocusedIndexChange,
-        allowHorizontalArrowKeys: !isFocused,
+        disableHorizontalKeys: isFocused,
         // We pass true without checking visibility of the component because if the popover is not visible this picker won't be mounted
         isActive: true,
         allowNegativeIndexes: true,
diff --git a/src/hooks/useArrowKeyFocusManager.ts b/src/hooks/useArrowKeyFocusManager.ts
index 2de6cc25156..fc4dc52c0a7 100644
--- a/src/hooks/useArrowKeyFocusManager.ts
+++ b/src/hooks/useArrowKeyFocusManager.ts
@@ -12,7 +12,7 @@ type Config = {
     isActive?: boolean;
     itemsPerRow?: number;
     disableCyclicTraversal?: boolean;
-    allowHorizontalArrowKeys?: boolean;
+    disableHorizontalKeys?: boolean;
     allowNegativeIndexes?: boolean;
     isFocused?: boolean;
 };
@@ -47,10 +47,11 @@ export default function useArrowKeyFocusManager({
     isActive,
     itemsPerRow,
     disableCyclicTraversal = false,
-    allowHorizontalArrowKeys = false,
+    disableHorizontalKeys = false,
     allowNegativeIndexes = false,
     isFocused = true,
 }: Config): UseArrowKeyFocusManager {
+    const allowHorizontalArrowKeys = !!itemsPerRow;
     const [focusedIndex, setFocusedIndex] = useState(initialFocusedIndex);
     const prevIsFocusedIndex = usePrevious(focusedIndex);
     const arrowConfig = useMemo(
@@ -64,9 +65,9 @@ export default function useArrowKeyFocusManager({
     const horizontalArrowConfig = useMemo(
         () => ({
             excludedNodes: shouldExcludeTextAreaNodes ? ['TEXTAREA'] : [],
-            isActive: isActive && allowHorizontalArrowKeys,
+            isActive: isActive && !disableHorizontalKeys,
         }),
-        [isActive, shouldExcludeTextAreaNodes, allowHorizontalArrowKeys],
+        [isActive, shouldExcludeTextAreaNodes, disableHorizontalKeys],
     );

     useEffect(() => {
@@ -84,11 +85,16 @@ export default function useArrowKeyFocusManager({
         const nextIndex = disableCyclicTraversal ? -1 : maxIndex;

         setFocusedIndex((actualIndex) => {
-            const currentFocusedIndex = actualIndex > 0 ? actualIndex - (itemsPerRow ?? 1) : nextIndex;
+            let currentFocusedIndex = -1;
+            if (allowHorizontalArrowKeys) {
+                currentFocusedIndex = actualIndex > 0 ? actualIndex - itemsPerRow : nextIndex;
+            } else {
+                currentFocusedIndex = actualIndex > 0 ? actualIndex - 1 : nextIndex;
+            }
             let newFocusedIndex = currentFocusedIndex;

             while (disabledIndexes.includes(newFocusedIndex)) {
-                newFocusedIndex -= itemsPerRow ?? 1;
+                newFocusedIndex -= allowHorizontalArrowKeys ? itemsPerRow : 1;
                 if (newFocusedIndex < 0) {
                     if (disableCyclicTraversal) {
                         if (!allowNegativeIndexes) {
@@ -121,8 +127,10 @@ export default function useArrowKeyFocusManager({

             if (actualIndex === -1) {
                 currentFocusedIndex = 0;
+            } else if (allowHorizontalArrowKeys) {
+                currentFocusedIndex = actualIndex < maxIndex ? actualIndex + itemsPerRow : nextIndex;
             } else {
-                currentFocusedIndex = actualIndex < maxIndex ? actualIndex + (itemsPerRow ?? 1) : nextIndex;
+                currentFocusedIndex = actualIndex < maxIndex ? actualIndex + 1 : nextIndex;
             }

             if (disableCyclicTraversal && currentFocusedIndex > maxIndex) {
@@ -134,7 +142,7 @@ export default function useArrowKeyFocusManager({
                 if (actualIndex < 0) {
                     newFocusedIndex += 1;
                 } else {
-                    newFocusedIndex += itemsPerRow ?? 1;
+                    newFocusedIndex += allowHorizontalArrowKeys ? itemsPerRow : 1;
                 }

                 if (newFocusedIndex > maxIndex) {
@@ -162,7 +170,8 @@ export default function useArrowKeyFocusManager({
         const nextIndex = disableCyclicTraversal ? -1 : maxIndex;

         setFocusedIndex((actualIndex) => {
-            const currentFocusedIndex = actualIndex > 0 ? actualIndex - 1 : nextIndex;
+            let currentFocusedIndex = -1;
+            currentFocusedIndex = actualIndex > 0 ? actualIndex - 1 : nextIndex;

             let newFocusedIndex = currentFocusedIndex;

@@ -188,7 +197,8 @@ export default function useArrowKeyFocusManager({
         const nextIndex = disableCyclicTraversal ? maxIndex : 0;

         setFocusedIndex((actualIndex) => {
-            const currentFocusedIndex = actualIndex < maxIndex ? actualIndex + 1 : nextIndex;
+            let currentFocusedIndex = -1;
+            currentFocusedIndex = actualIndex < maxIndex ? actualIndex + 1 : nextIndex;

             let newFocusedIndex = currentFocusedIndex;

