diff --git a/src/pages/settings/Report/NotificationPreferencePage.tsx b/src/pages/settings/Report/NotificationPreferencePage.tsx
index 416d710d496..b33ce408e7f 100644
--- a/src/pages/settings/Report/NotificationPreferencePage.tsx
+++ b/src/pages/settings/Report/NotificationPreferencePage.tsx
@@ -7,7 +7,7 @@ import type {ValueOf} from 'type-fest';
 import FullPageNotFoundView from '@components/BlockingViews/FullPageNotFoundView';
 import HeaderWithBackButton from '@components/HeaderWithBackButton';
 import ScreenWrapper from '@components/ScreenWrapper';
-import SelectionList from '@components/SelectionList';
+import OptionsList from '@components/OptionsList';
 import RadioListItem from '@components/SelectionList/RadioListItem';
 import useLocalize from '@hooks/useLocalize';
 import * as ReportUtils from '@libs/ReportUtils';
@@ -18,9 +18,13 @@ import * as ReportActions from '@userActions/Report';
 import CONST from '@src/CONST';
 import ONYXKEYS from '@src/ONYXKEYS';
 import type SCREENS from '@src/SCREENS';
+import * as Expensicons from '@src/components/Icon/Expensicons';
+import defaultTheme from '@src/styles/theme';

 type NotificationPreferencePageProps = WithReportOrNotFoundProps & StackScreenProps<ReportSettingsNavigatorParamList, typeof SCREENS.REPORT_SETTINGS.NOTIFICATION_PREFERENCES>;

+const greenCheckmark = {src: Expensicons.Checkmark, color: defaultTheme.light.success};
+
 function NotificationPreferencePage({report}: NotificationPreferencePageProps) {
     const route = useRoute<RouteProp<ReportSettingsNavigatorParamList, typeof SCREENS.REPORT_SETTINGS.NOTIFICATION_PREFERENCES>>();
     const {translate} = useLocalize();
@@ -38,6 +42,8 @@ function NotificationPreferencePage({report}: NotificationPreferencePageProps) {
             text: translate(`notificationPreferencesPage.notificationPreferences.${preference}`),
             keyForList: preference,
             isSelected: preference === currentNotificationPreference,
+            // Include the green checkmark icon to indicate the currently selected value
+            customIcon: preference === currentNotificationPreference ? greenCheckmark : null,
         }));

     const goBack = useCallback(() => {
@@ -62,7 +68,7 @@ function NotificationPreferencePage({report}: NotificationPreferencePageProps) {
                     title={translate('notificationPreferencesPage.header')}
                     onBackButtonPress={goBack}
                 />
-                <SelectionList
+                <OptionsList
                     sections={[{data: notificationPreferenceOptions}]}
                     ListItem={RadioListItem}
                     onSelectRow={(option) => updateNotificationPreference(option.value)}
diff --git a/src/pages/settings/Report/WriteCapabilityPage.tsx b/src/pages/settings/Report/WriteCapabilityPage.tsx
index 888c15295dc..fb8a13cb350 100644
--- a/src/pages/settings/Report/WriteCapabilityPage.tsx
+++ b/src/pages/settings/Report/WriteCapabilityPage.tsx
@@ -8,7 +8,7 @@ import type {ValueOf} from 'type-fest';
 import FullPageNotFoundView from '@components/BlockingViews/FullPageNotFoundView';
 import HeaderWithBackButton from '@components/HeaderWithBackButton';
 import ScreenWrapper from '@components/ScreenWrapper';
-import SelectionList from '@components/SelectionList';
+import OptionsList from '@components/OptionsList';
 import RadioListItem from '@components/SelectionList/RadioListItem';
 import useLocalize from '@hooks/useLocalize';
 import Navigation from '@libs/Navigation/Navigation';
@@ -22,6 +22,10 @@ import ONYXKEYS from '@src/ONYXKEYS';
 import ROUTES from '@src/ROUTES';
 import type SCREENS from '@src/SCREENS';
 import type {Policy} from '@src/types/onyx';
+import * as Expensicons from '@src/components/Icon/Expensicons';
+import defaultTheme from '@src/styles/theme';
+
+const greenCheckmark = {src: Expensicons.Checkmark, color: defaultTheme.light.success};

 type WriteCapabilityPageOnyxProps = {
     /** The policy object for the current route */
@@ -40,6 +44,8 @@ function WriteCapabilityPage({report, policy}: WriteCapabilityPageProps) {
         text: translate(`writeCapabilityPage.writeCapability.${value}`),
         keyForList: value,
         isSelected: value === (report?.writeCapability ?? CONST.REPORT.WRITE_CAPABILITIES.ALL),
+        // Include the green checkmark icon to indicate the currently selected value
+        customIcon: value === (report?.writeCapability ?? CONST.REPORT.WRITE_CAPABILITIES.ALL) ? greenCheckmark : null,
     }));

     const isAbleToEdit = ReportUtils.canEditWriteCapability(report, policy);
@@ -67,7 +73,7 @@ function WriteCapabilityPage({report, policy}: WriteCapabilityPageProps) {
                     shouldShowBackButton
                     onBackButtonPress={goBack}
                 />
-                <SelectionList
+                <OptionsList
                     sections={[{data: writeCapabilityOptions}]}
                     ListItem={RadioListItem}
                     onSelectRow={(option) => updateWriteCapability(option.value)}
