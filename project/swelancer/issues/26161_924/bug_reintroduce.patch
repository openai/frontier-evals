diff --git a/src/pages/signin/SignInPage.tsx b/src/pages/signin/SignInPage.tsx
index 729faae5e90..edbf129b605 100644
--- a/src/pages/signin/SignInPage.tsx
+++ b/src/pages/signin/SignInPage.tsx
@@ -13,7 +13,7 @@ import useResponsiveLayout from '@hooks/useResponsiveLayout';
 import useSafeAreaInsets from '@hooks/useSafeAreaInsets';
 import useStyleUtils from '@hooks/useStyleUtils';
 import useThemeStyles from '@hooks/useThemeStyles';
-import * as ActiveClientManager from '@libs/ActiveClientManager';
+//import * as ActiveClientManager from '@libs/ActiveClientManager';
 import * as Localize from '@libs/Localize';
 import Log from '@libs/Log';
 import Navigation from '@libs/Navigation/Navigation';
@@ -119,7 +119,7 @@ function getRenderOptions({
 
     // Show the Welcome form if a user is signing up for a new account in a domain that is not controlled
     const shouldShouldSignUpWelcomeForm = !!credentials?.login && !account?.validated && !account?.accountExists && !account?.domainControlled;
-    const shouldShowLoginForm = !shouldShowAnotherLoginPageOpenedMessage && !hasLogin && !hasValidateCode;
+    const shouldShowLoginForm = shouldShowAnotherLoginPageOpenedMessage && !hasLogin && !hasValidateCode;
     const shouldShowEmailDeliveryFailurePage = hasLogin && hasEmailDeliveryFailure && !shouldShowChooseSSOOrMagicCode && !shouldInitiateSAMLLogin;
     const isUnvalidatedSecondaryLogin = hasLogin && !isPrimaryLogin && !account?.validated && !hasEmailDeliveryFailure;
     const shouldShowValidateCodeForm =
@@ -171,10 +171,10 @@ function SignInPage({credentials, account, activeClients = [], preferredLocale,
 
     const [login, setLogin] = useState(() => Str.removeSMSDomain(credentials?.login ?? ''));
 
-    const isClientTheLeader = !!activeClients && ActiveClientManager.isClientTheLeader();
+    //const isClientTheLeader = !!activeClients && ActiveClientManager.isClientTheLeader();
     // We need to show "Another login page is opened" message if the page isn't active and visible
     // eslint-disable-next-line rulesdir/no-negated-variables
-    const shouldShowAnotherLoginPageOpenedMessage = Visibility.isVisible() && !isClientTheLeader;
+    const shouldShowAnotherLoginPageOpenedMessage = Visibility.isVisible();
 
     useEffect(() => Performance.measureTTI(), []);
     useEffect(() => {
@@ -232,10 +232,7 @@ function SignInPage({credentials, account, activeClients = [], preferredLocale,
     // replacing spaces with "hard spaces" to prevent breaking the number
     const userLoginToDisplay = Str.isSMSLogin(userLogin) ? formatPhoneNumber(userLogin) : userLogin;
 
-    if (shouldShowAnotherLoginPageOpenedMessage) {
-        welcomeHeader = translate('welcomeText.anotherLoginPageIsOpen');
-        welcomeText = translate('welcomeText.anotherLoginPageIsOpenExplanation');
-    } else if (shouldShowLoginForm) {
+    if (shouldShowLoginForm) {
         welcomeHeader = shouldUseNarrowLayout ? headerText : translate('welcomeText.getStarted');
         welcomeText = shouldUseNarrowLayout ? translate('welcomeText.getStarted') : '';
     } else if (shouldShowValidateCodeForm) {
@@ -272,8 +269,7 @@ function SignInPage({credentials, account, activeClients = [], preferredLocale,
 
     const navigateBack = () => {
         if (
-            shouldShouldSignUpWelcomeForm ||
-            (!shouldShowAnotherLoginPageOpenedMessage && (shouldShowEmailDeliveryFailurePage || shouldShowUnlinkLoginForm || shouldShowChooseSSOOrMagicCode))
+            shouldShouldSignUpWelcomeForm || shouldShowEmailDeliveryFailurePage || shouldShowUnlinkLoginForm || shouldShowChooseSSOOrMagicCode
         ) {
             Session.clearSignInData();
             return;
@@ -320,13 +316,13 @@ function SignInPage({credentials, account, activeClients = [], preferredLocale,
                 {shouldShouldSignUpWelcomeForm && <SignUpWelcomeForm />}
                 {shouldShowValidateCodeForm && (
                     <ValidateCodeForm
-                        isVisible={!shouldShowAnotherLoginPageOpenedMessage}
+                        isVisible={shouldShowAnotherLoginPageOpenedMessage}
                         isUsingRecoveryCode={isUsingRecoveryCode}
                         setIsUsingRecoveryCode={setIsUsingRecoveryCode}
                         ref={validateCodeFormRef}
                     />
                 )}
-                {!shouldShowAnotherLoginPageOpenedMessage && (
+                {shouldShowAnotherLoginPageOpenedMessage && (
                     <>
                         {shouldShowUnlinkLoginForm && <UnlinkLoginForm />}
                         {shouldShowChooseSSOOrMagicCode && <ChooseSSOOrMagicCode setIsUsingMagicCode={setIsUsingMagicCode} />}
                         