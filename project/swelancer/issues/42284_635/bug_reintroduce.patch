diff --git a/src/components/MoneyRequestConfirmationList.tsx b/src/components/MoneyRequestConfirmationList.tsx
index 0e0438f83b2..60114fcda30 100755
--- a/src/components/MoneyRequestConfirmationList.tsx
+++ b/src/components/MoneyRequestConfirmationList.tsx
@@ -991,7 +991,7 @@ export default withOnyx<MoneyRequestConfirmationListProps, MoneyRequestConfirmat
     },
     mileageRates: {
         key: ({policyID}) => `${ONYXKEYS.COLLECTION.POLICY}${policyID}`,
-        selector: (policy: OnyxEntry<OnyxTypes.Policy>) => DistanceRequestUtils.getMileageRates(policy),
+        selector: DistanceRequestUtils.getMileageRates,
     },
     policy: {
         key: ({policyID}) => `${ONYXKEYS.COLLECTION.POLICY}${policyID}`,
diff --git a/src/libs/DistanceRequestUtils.ts b/src/libs/DistanceRequestUtils.ts
index e9a2eaa8027..cba8ae62d7d 100644
--- a/src/libs/DistanceRequestUtils.ts
+++ b/src/libs/DistanceRequestUtils.ts
@@ -8,6 +8,7 @@ import type {LastSelectedDistanceRates, OnyxInputOrEntry} from '@src/types/onyx'
 import type {Unit} from '@src/types/onyx/Policy';
 import type Policy from '@src/types/onyx/Policy';
 import {isEmptyObject} from '@src/types/utils/EmptyObject';
+import type {EmptyObject} from '@src/types/utils/EmptyObject';
 import * as CurrencyUtils from './CurrencyUtils';
 import * as PolicyUtils from './PolicyUtils';
 import * as ReportConnection from './ReportConnection';
@@ -33,36 +34,6 @@ Onyx.connect({
 const METERS_TO_KM = 0.001; // 1 kilometer is 1000 meters
 const METERS_TO_MILES = 0.000621371; // There are approximately 0.000621371 miles in a meter
 
-function getMileageRates(policy: OnyxInputOrEntry<Policy>, includeDisabledRates = false, selectedRateID?: string): Record<string, MileageRate> {
-    const mileageRates: Record<string, MileageRate> = {};
-
-    if (!policy?.customUnits) {
-        return mileageRates;
-    }
-
-    const distanceUnit = PolicyUtils.getCustomUnit(policy);
-    if (!distanceUnit?.rates) {
-        return mileageRates;
-    }
-
-    Object.entries(distanceUnit.rates).forEach(([rateID, rate]) => {
-        if (!includeDisabledRates && rate.enabled === false && (!selectedRateID || rateID !== selectedRateID)) {
-            return;
-        }
-
-        mileageRates[rateID] = {
-            rate: rate.rate,
-            currency: rate.currency,
-            unit: distanceUnit.attributes.unit,
-            name: rate.name,
-            customUnitRateID: rate.customUnitRateID,
-            enabled: rate.enabled,
-        };
-    });
-
-    return mileageRates;
-}
-
 /**
  * Retrieves the default mileage rate based on a given policy.
  *
@@ -73,18 +44,17 @@ function getMileageRates(policy: OnyxInputOrEntry<Policy>, includeDisabledRates
  * @returns [currency] - The currency associated with the rate.
  * @returns [unit] - The unit of measurement for the distance.
  */
-function getDefaultMileageRate(policy: OnyxInputOrEntry<Policy>): MileageRate | undefined {
-    if (isEmptyObject(policy) || !policy?.customUnits) {
-        return undefined;
+function getDefaultMileageRate(policy: OnyxEntry<Policy> | EmptyObject): MileageRate | null {
+    if (!policy?.customUnits) {
+        return null;
     }
 
     const distanceUnit = PolicyUtils.getCustomUnit(policy);
     if (!distanceUnit?.rates) {
         return;
     }
-    const mileageRates = Object.values(getMileageRates(policy));
 
-    const distanceRate = mileageRates.find((rate) => rate.name === CONST.CUSTOM_UNITS.DEFAULT_RATE) ?? mileageRates[0] ?? {};
+    const distanceRate = Object.values(distanceUnit.rates).find((rate) => rate.name === CONST.CUSTOM_UNITS.DEFAULT_RATE) ?? Object.values(distanceUnit.rates)[0];
 
     return {
         customUnitRateID: distanceRate.customUnitRateID,
@@ -219,6 +189,38 @@ function getDistanceMerchant(
     return `${distanceInUnits} @ ${ratePerUnit}`;
 }
 
+/**
+ * Retrieves the mileage rates for given policy.
+ *
+ * @param policy - The policy from which to extract the mileage rates.
+ *
+ * @returns An array of mileage rates or an empty array if not found.
+ */
+function getMileageRates(policy: OnyxEntry<Policy>): Record<string, MileageRate> {
+    const mileageRates: Record<string, MileageRate> = {};
+
+    if (!policy || !policy?.customUnits) {
+        return mileageRates;
+    }
+
+    const distanceUnit = PolicyUtils.getCustomUnit(policy);
+    if (!distanceUnit?.rates) {
+        return mileageRates;
+    }
+
+    Object.entries(distanceUnit.rates).forEach(([rateID, rate]) => {
+        mileageRates[rateID] = {
+            rate: rate.rate,
+            currency: rate.currency,
+            unit: distanceUnit.attributes.unit,
+            name: rate.name,
+            customUnitRateID: rate.customUnitRateID,
+        };
+    });
+
+    return mileageRates;
+}
+
 /**
  * Retrieves the rate and unit for a P2P distance expense for a given currency.
  *
@@ -264,22 +266,16 @@ function convertToDistanceInMeters(distance: number, unit: Unit): number {
 /**
  * Returns custom unit rate ID for the distance transaction
  */
-function getCustomUnitRateID(reportID: string, shouldUseDefault?: boolean) {
+function getCustomUnitRateID(reportID: string) {
     const allReports = ReportConnection.getAllReports();
-    const report = allReports?.[`${ONYXKEYS.COLLECTION.REPORT}${reportID}`];
-    const parentReport = allReports?.[`${ONYXKEYS.COLLECTION.REPORT}${report?.parentReportID}`];
-    const policy = PolicyUtils.getPolicy(report?.policyID ?? parentReport?.policyID ?? '-1');
+    const report = allReports?.[`${ONYXKEYS.COLLECTION.REPORT}${reportID}`] ?? null;
+    const parentReport = allReports?.[`${ONYXKEYS.COLLECTION.REPORT}${report?.parentReportID}`] ?? null;
+    const policy = PolicyUtils.getPolicy(report?.policyID ?? parentReport?.policyID ?? '');
+
     let customUnitRateID: string = CONST.CUSTOM_UNITS.FAKE_P2P_ID;
 
     if (ReportUtils.isPolicyExpenseChat(report) || ReportUtils.isPolicyExpenseChat(parentReport)) {
-        const distanceUnit = Object.values(policy?.customUnits ?? {}).find((unit) => unit.name === CONST.CUSTOM_UNITS.NAME_DISTANCE);
-        const lastSelectedDistanceRateID = lastSelectedDistanceRates?.[policy?.id ?? '-1'] ?? '-1';
-        const lastSelectedDistanceRate = distanceUnit?.rates[lastSelectedDistanceRateID] ?? {};
-        if (lastSelectedDistanceRate.enabled && lastSelectedDistanceRateID && !shouldUseDefault) {
-            customUnitRateID = lastSelectedDistanceRateID;
-        } else {
-            customUnitRateID = getDefaultMileageRate(policy)?.customUnitRateID ?? '-1';
-        }
+        customUnitRateID = lastSelectedDistanceRates?.[policy?.id ?? ''] ?? getDefaultMileageRate(policy)?.customUnitRateID ?? '';
     }
 
     return customUnitRateID;
     