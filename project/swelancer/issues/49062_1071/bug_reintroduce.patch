diff --git a/src/pages/home/report/ReportActionCompose/ReportActionCompose.tsx b/src/pages/home/report/ReportActionCompose/ReportActionCompose.tsx
index 14908014ca0..d2cc8229d14 100644
--- a/src/pages/home/report/ReportActionCompose/ReportActionCompose.tsx
+++ b/src/pages/home/report/ReportActionCompose/ReportActionCompose.tsx
@@ -20,7 +20,8 @@ import OfflineWithFeedback from '@components/OfflineWithFeedback';
 import {usePersonalDetails} from '@components/OnyxProvider';
 import Text from '@components/Text';
 import EducationalTooltip from '@components/Tooltip/EducationalTooltip';
-import useCurrentUserPersonalDetails from '@hooks/useCurrentUserPersonalDetails';
+import type {WithCurrentUserPersonalDetailsProps} from '@components/withCurrentUserPersonalDetails';
+import withCurrentUserPersonalDetails from '@components/withCurrentUserPersonalDetails';
 import useDebounce from '@hooks/useDebounce';
 import useHandleExceedMaxCommentLength from '@hooks/useHandleExceedMaxCommentLength';
 import useLocalize from '@hooks/useLocalize';
@@ -64,31 +65,32 @@ type SuggestionsRef = {
     getIsSuggestionsMenuVisible: () => boolean;
 };
 
-type ReportActionComposeProps = Pick<ComposerWithSuggestionsProps, 'reportID' | 'isEmptyChat' | 'isComposerFullSize' | 'lastReportAction'> & {
-    /** A method to call when the form is submitted */
-    onSubmit: (newComment: string) => void;
+type ReportActionComposeProps = WithCurrentUserPersonalDetailsProps &
+    Pick<ComposerWithSuggestionsProps, 'reportID' | 'isEmptyChat' | 'isComposerFullSize' | 'lastReportAction'> & {
+        /** A method to call when the form is submitted */
+        onSubmit: (newComment: string) => void;
 
-    /** The report currently being looked at */
-    report: OnyxEntry<OnyxTypes.Report>;
+        /** The report currently being looked at */
+        report: OnyxEntry<OnyxTypes.Report>;
 
-    /** The type of action that's pending  */
-    pendingAction?: OnyxCommon.PendingAction;
+        /** The type of action that's pending  */
+        pendingAction?: OnyxCommon.PendingAction;
 
-    /** Whether the report is ready for display */
-    isReportReadyForDisplay?: boolean;
+        /** Whether the report is ready for display */
+        isReportReadyForDisplay?: boolean;
 
-    /** A method to call when the input is focus */
-    onComposerFocus?: () => void;
+        /** A method to call when the input is focus */
+        onComposerFocus?: () => void;
 
-    /** A method to call when the input is blur */
-    onComposerBlur?: () => void;
+        /** A method to call when the input is blur */
+        onComposerBlur?: () => void;
 
-    /** Should the input be disabled  */
-    disabled?: boolean;
+        /** Should the input be disabled  */
+        disabled?: boolean;
 
-    /** Should show educational tooltip */
-    shouldShowEducationalTooltip?: boolean;
-};
+        /** Should show educational tooltip */
+        shouldShowEducationalTooltip?: boolean;
+    };
 
 // We want consistent auto focus behavior on input between native and mWeb so we have some auto focus management code that will
 // prevent auto focus on existing chat for mobile device
@@ -100,6 +102,7 @@ const willBlurTextInputOnTapOutside = willBlurTextInputOnTapOutsideFunc();
 let onSubmitAction = noop;
 
 function ReportActionCompose({
+    currentUserPersonalDetails,
     disabled = false,
     isComposerFullSize = false,
     onSubmit,
@@ -120,7 +123,6 @@ function ReportActionCompose({
     const {isSmallScreenWidth, isMediumScreenWidth, shouldUseNarrowLayout} = useResponsiveLayout();
     const {isOffline} = useNetwork();
     const actionButtonRef = useRef<View | HTMLDivElement | null>(null);
-    const currentUserPersonalDetails = useCurrentUserPersonalDetails();
     const personalDetails = usePersonalDetails() || CONST.EMPTY_OBJECT;
     const navigation = useNavigation();
     const [blockedFromConcierge] = useOnyx(ONYXKEYS.NVP_BLOCKED_FROM_CONCIERGE);
@@ -136,6 +138,9 @@ function ReportActionCompose({
     const [isFullComposerAvailable, setIsFullComposerAvailable] = useState(isComposerFullSize);
     const [shouldHideEducationalTooltip, setShouldHideEducationalTooltip] = useState(false);
 
+    // Ref for manually reproducing the console warning.
+    const dummyRef = useRef(false);
+
     // A flag to indicate whether the onScroll callback is likely triggered by a layout change (caused by text change) or not
     const isScrollLikelyLayoutTriggered = useRef(false);
 
@@ -545,7 +550,7 @@ function ReportActionCompose({
                         ]}
                     >
                         {!shouldUseNarrowLayout && <OfflineIndicator containerStyles={[styles.chatItemComposeSecondaryRow]} />}
-                        <ReportTypingIndicator reportID={reportID} />
+                        <ReportTypingIndicator ref={dummyRef} reportID={reportID} />
                         {hasExceededMaxCommentLength && <ExceededCommentLength />}
                     </View>
                 </OfflineWithFeedback>
@@ -561,6 +566,6 @@ function ReportActionCompose({
 
 ReportActionCompose.displayName = 'ReportActionCompose';
 
-export default memo(ReportActionCompose);
+export default withCurrentUserPersonalDetails(memo(ReportActionCompose));
 export {onSubmitAction};
 export type {SuggestionsRef, ComposerRef};
diff --git a/src/pages/home/report/ReportActionsList.tsx b/src/pages/home/report/ReportActionsList.tsx
index 541c5d44c6b..2aed43a8fd6 100644
--- a/src/pages/home/report/ReportActionsList.tsx
+++ b/src/pages/home/report/ReportActionsList.tsx
@@ -11,7 +11,8 @@ import type {OnyxEntry} from 'react-native-onyx';
 import InvertedFlatList from '@components/InvertedFlatList';
 import {AUTOSCROLL_TO_TOP_THRESHOLD} from '@components/InvertedFlatList/BaseInvertedFlatList';
 import {usePersonalDetails} from '@components/OnyxProvider';
-import useCurrentUserPersonalDetails from '@hooks/useCurrentUserPersonalDetails';
+import withCurrentUserPersonalDetails from '@components/withCurrentUserPersonalDetails';
+import type {WithCurrentUserPersonalDetailsProps} from '@components/withCurrentUserPersonalDetails';
 import useLocalize from '@hooks/useLocalize';
 import useNetwork from '@hooks/useNetwork';
 import usePrevious from '@hooks/usePrevious';
@@ -39,7 +40,7 @@ import ReportActionsListItemRenderer from './ReportActionsListItemRenderer';
 
 type LoadNewerChats = DebouncedFunc<(params: {distanceFromStart: number}) => void>;
 
-type ReportActionsListProps = {
+type ReportActionsListProps = WithCurrentUserPersonalDetailsProps & {
     /** The report currently being looked at */
     report: OnyxTypes.Report;
 
@@ -146,6 +147,7 @@ function ReportActionsList({
     sortedReportActions,
     onScroll,
     mostRecentIOUReportActionID = '',
+    currentUserPersonalDetails,
     loadNewerChats,
     loadOlderChats,
     onLayout,
@@ -155,7 +157,6 @@ function ReportActionsList({
     shouldEnableAutoScrollToTopThreshold,
     parentReportActionForTransactionThread,
 }: ReportActionsListProps) {
-    const currentUserPersonalDetails = useCurrentUserPersonalDetails();
     const personalDetailsList = usePersonalDetails() || CONST.EMPTY_OBJECT;
     const styles = useThemeStyles();
     const {translate} = useLocalize();
@@ -706,6 +707,6 @@ function ReportActionsList({
 
 ReportActionsList.displayName = 'ReportActionsList';
 
-export default memo(ReportActionsList);
+export default withCurrentUserPersonalDetails(memo(ReportActionsList));
 
 export type {LoadNewerChats, ReportActionsListProps};
diff --git a/src/pages/home/report/ReportTypingIndicator.tsx b/src/pages/home/report/ReportTypingIndicator.tsx
index a04a7700ec9..7a1c90ded34 100755
--- a/src/pages/home/report/ReportTypingIndicator.tsx
+++ b/src/pages/home/report/ReportTypingIndicator.tsx
@@ -1,5 +1,6 @@
 import React, {memo, useMemo} from 'react';
-import {useOnyx} from 'react-native-onyx';
+import type {OnyxEntry} from 'react-native-onyx';
+import {withOnyx} from 'react-native-onyx';
 import Text from '@components/Text';
 import TextWithEllipsis from '@components/TextWithEllipsis';
 import useLocalize from '@hooks/useLocalize';
@@ -7,16 +8,22 @@ import useNetwork from '@hooks/useNetwork';
 import useThemeStyles from '@hooks/useThemeStyles';
 import * as ReportUtils from '@libs/ReportUtils';
 import ONYXKEYS from '@src/ONYXKEYS';
+import type {ReportUserIsTyping} from '@src/types/onyx';
 
-type ReportTypingIndicatorProps = {
+type ReportTypingIndicatorOnyxProps = {
+    /** Key-value pairs of user accountIDs/logins and whether or not they are typing. Keys are accountIDs or logins. */
+    userTypingStatuses: OnyxEntry<ReportUserIsTyping>;
+};
+
+type ReportTypingIndicatorProps = ReportTypingIndicatorOnyxProps & {
+    // eslint-disable-next-line react/no-unused-prop-types -- This is used by withOnyx
     reportID: string;
 };
 
-function ReportTypingIndicator({reportID}: ReportTypingIndicatorProps) {
+function ReportTypingIndicator({userTypingStatuses}: ReportTypingIndicatorProps) {
     const {translate} = useLocalize();
     const {isOffline} = useNetwork();
 
-    const [userTypingStatuses] = useOnyx(`${ONYXKEYS.COLLECTION.REPORT_USER_IS_TYPING}${reportID}`);
     const styles = useThemeStyles();
     const usersTyping = useMemo(() => Object.keys(userTypingStatuses ?? {}).filter((loginOrAccountID) => userTypingStatuses?.[loginOrAccountID]), [userTypingStatuses]);
     const firstUserTyping = usersTyping.at(0);
@@ -56,4 +63,8 @@ function ReportTypingIndicator({reportID}: ReportTypingIndicatorProps) {
 
 ReportTypingIndicator.displayName = 'ReportTypingIndicator';
 
-export default memo(ReportTypingIndicator);
+export default withOnyx<ReportTypingIndicatorProps, ReportTypingIndicatorOnyxProps>({
+    userTypingStatuses: {
+        key: ({reportID}) => `${ONYXKEYS.COLLECTION.REPORT_USER_IS_TYPING}${reportID}`,
+    },
+})(memo(ReportTypingIndicator));
diff --git a/src/pages/home/report/UserTypingEventListener.tsx b/src/pages/home/report/UserTypingEventListener.tsx
index fa0eed4d57c..57eb51df137 100644
--- a/src/pages/home/report/UserTypingEventListener.tsx
+++ b/src/pages/home/report/UserTypingEventListener.tsx
@@ -2,7 +2,7 @@ import type {RouteProp} from '@react-navigation/native';
 import {useIsFocused, useRoute} from '@react-navigation/native';
 import {useEffect, useRef} from 'react';
 import {InteractionManager} from 'react-native';
-import {useOnyx} from 'react-native-onyx';
+import {withOnyx} from 'react-native-onyx';
 import Navigation from '@libs/Navigation/Navigation';
 import type {AuthScreensParamList} from '@libs/Navigation/types';
 import * as Report from '@userActions/Report';
@@ -10,12 +10,16 @@ import ONYXKEYS from '@src/ONYXKEYS';
 import type SCREENS from '@src/SCREENS';
 import type * as OnyxTypes from '@src/types/onyx';
 
-type UserTypingEventListenerProps = {
+type UserTypingEventListenerOnyxProps = {
+    /** Stores last visited path */
+    lastVisitedPath?: string;
+};
+
+type UserTypingEventListenerProps = UserTypingEventListenerOnyxProps & {
     /** The report currently being looked at */
     report: OnyxTypes.Report;
 };
-function UserTypingEventListener({report}: UserTypingEventListenerProps) {
-    const [lastVisitedPath] = useOnyx(ONYXKEYS.LAST_VISITED_PATH, {selector: (path) => path ?? ''});
+function UserTypingEventListener({report, lastVisitedPath}: UserTypingEventListenerProps) {
     const didSubscribeToReportTypingEvents = useRef(false);
     const reportID = report.reportID;
     const isFocused = useIsFocused();
@@ -79,4 +83,9 @@ function UserTypingEventListener({report}: UserTypingEventListenerProps) {
 
 UserTypingEventListener.displayName = 'UserTypingEventListener';
 
-export default UserTypingEventListener;
+export default withOnyx<UserTypingEventListenerProps, UserTypingEventListenerOnyxProps>({
+    lastVisitedPath: {
+        key: ONYXKEYS.LAST_VISITED_PATH,
+        selector: (path) => path ?? '',
+    },
+})(UserTypingEventListener);
