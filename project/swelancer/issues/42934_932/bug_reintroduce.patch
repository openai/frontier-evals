diff --git a/src/components/ReportActionItem/TaskPreview.tsx b/src/components/ReportActionItem/TaskPreview.tsx
index a2ea7487df0..9070616e486 100644
--- a/src/components/ReportActionItem/TaskPreview.tsx
+++ b/src/components/ReportActionItem/TaskPreview.tsx
@@ -69,10 +69,9 @@ function TaskPreview({taskReportID, action, contextMenuAnchor, chatReportID, che
         ? taskReport?.stateNum === CONST.REPORT.STATE_NUM.APPROVED && taskReport.statusNum === CONST.REPORT.STATUS_NUM.APPROVED
         : action?.childStateNum === CONST.REPORT.STATE_NUM.APPROVED && action?.childStatusNum === CONST.REPORT.STATUS_NUM.APPROVED;
     const taskTitle = Str.htmlEncode(TaskUtils.getTaskTitle(taskReportID, action?.childReportName ?? ''));
-    const taskAssigneeAccountID = Task.getTaskAssigneeAccountID(taskReport) ?? action?.childManagerAccountID ?? -1;
-    const personalDetails = usePersonalDetails();
-    const avatar = personalDetails?.[taskAssigneeAccountID]?.avatar ?? Expensicons.FallbackAvatar;
-    const htmlForTaskPreview = `<comment>${taskTitle}</comment>`;
+    const taskAssigneeAccountID = Task.getTaskAssigneeAccountID(taskReport) ?? action?.childManagerAccountID ?? '-1';
+    const htmlForTaskPreview =
+        taskAssigneeAccountID !== 0 ? `<comment><mention-user accountid="${taskAssigneeAccountID}"></mention-user> ${taskTitle}</comment>` : `<comment>${taskTitle}</comment>`;
     const isDeletedParentAction = ReportUtils.isCanceledTaskReport(taskReport, action);
     const shouldShowGreenDotIndicator = ReportUtils.isOpenTaskReport(taskReport, action) && ReportUtils.isReportManager(taskReport);
     if (isDeletedParentAction) {
@@ -91,34 +90,22 @@ function TaskPreview({taskReportID, action, contextMenuAnchor, chatReportID, che
                 role={CONST.ROLE.BUTTON}
                 accessibilityLabel={translate('task.task')}
             >
-                <View style={[styles.flex1, styles.flexRow, styles.alignItemsStart, styles.mt1]}>
-                    <View style={[styles.taskCheckboxWrapper, styles.alignSelfCenter]}>
-                        <Checkbox
-                            style={[styles.mr2]}
-                            isChecked={isTaskCompleted}
-                            disabled={!Task.canModifyTask(taskReport, currentUserPersonalDetails.accountID) || !Task.canActionTask(taskReport, currentUserPersonalDetails.accountID)}
-                            onPress={Session.checkIfActionIsAllowed(() => {
-                                if (isTaskCompleted) {
-                                    Task.reopenTask(taskReport);
-                                } else {
-                                    Task.completeTask(taskReport);
-                                }
-                            })}
-                            accessibilityLabel={translate('task.task')}
-                        />
-                    </View>
-                    {taskAssigneeAccountID > 0 && (
-                        <Avatar
-                            containerStyles={[styles.mr2, styles.alignSelfCenter, isTaskCompleted ? styles.opacitySemiTransparent : undefined]}
-                            source={avatar}
-                            size={CONST.AVATAR_SIZE.SMALL}
-                            avatarID={taskAssigneeAccountID}
-                            type={CONST.ICON_TYPE_AVATAR}
-                        />
-                    )}
-                    <View style={[styles.alignSelfCenter]}>
-                        <RenderHTML html={isTaskCompleted ? `<completed-task>${htmlForTaskPreview}</completed-task>` : htmlForTaskPreview} />
-                    </View>
+                <View style={[styles.flex1, styles.flexRow, styles.alignItemsStart]}>
+                    <Checkbox
+                        style={[styles.mr2]}
+                        containerStyle={[styles.taskCheckbox]}
+                        isChecked={isTaskCompleted}
+                        disabled={!Task.canModifyTask(taskReport, currentUserPersonalDetails.accountID)}
+                        onPress={Session.checkIfActionIsAllowed(() => {
+                            if (isTaskCompleted) {
+                                Task.reopenTask(taskReport);
+                            } else {
+                                Task.completeTask(taskReport);
+                            }
+                        })}
+                        accessibilityLabel={translate('task.task')}
+                    />
+                    <RenderHTML html={isTaskCompleted ? `<completed-task>${htmlForTaskPreview}</completed-task>` : htmlForTaskPreview} />
                 </View>
                 {shouldShowGreenDotIndicator && (
                     <View style={styles.ml2}>
diff --git a/src/styles/index.ts b/src/styles/index.ts
index 46f4efd5eaa..bd0b35b5949 100644
--- a/src/styles/index.ts
+++ b/src/styles/index.ts
@@ -4118,9 +4118,9 @@ const styles = (theme: ThemeColors) =>
             width: 1,
         },
 
-        taskCheckboxWrapper: {
-            height: variables.fontSizeNormalHeight,
-            ...flex.justifyContentCenter,
+        taskCheckbox: {
+            height: 16,
+            width: 16,
         },
 
         taskTitleMenuItem: {
