diff --git a/src/pages/home/report/ContextMenu/ContextMenuActions.tsx b/src/pages/home/report/ContextMenu/ContextMenuActions.tsx
index 6f3a1e8e565..bda8a122c40 100644
--- a/src/pages/home/report/ContextMenu/ContextMenuActions.tsx
+++ b/src/pages/home/report/ContextMenu/ContextMenuActions.tsx
@@ -205,16 +205,13 @@ const ContextMenuActions: ContextMenuAction[] = [
         isAnonymousAction: false,
         textTranslateKey: 'reportActionContextMenu.markAsUnread',
         icon: Expensicons.ChatBubbleUnread,
-        successIcon: Expensicons.Checkmark,
-        shouldShow: ({type, isUnreadChat}) => type === CONST.CONTEXT_MENU_TYPES.REPORT_ACTION || (type === CONST.CONTEXT_MENU_TYPES.REPORT && !isUnreadChat),
+        shouldShow: ({type, isUnreadChat}) => type === CONST.CONTEXT_MENU_TYPES.REPORT_ACTION && !isUnreadChat,
         onPress: (closePopover, {reportAction, reportID}) => {
-            const originalReportID = ReportUtils.getOriginalReportID(reportID, reportAction) ?? '-1';
-            Report.markCommentAsUnread(originalReportID, reportAction?.created);
-            if (closePopover) {
-                hideContextMenu(true, ReportActionComposeFocusManager.focus);
-            }
+            // Intentionally not refocusing the composer
+            Report.markAsUnread(reportID);
         },
-        getDescription: () => {},
+        getDescription: () => undefined,
+        shouldPreventDefaultFocusOnPress: true, // Add this line to prevent refocusing
     },
     {
         isAnonymousAction: false,
@@ -329,16 +326,17 @@ const ContextMenuActions: ContextMenuAction[] = [
     },
     {
         isAnonymousAction: true,
-        textTranslateKey: 'reportActionContextMenu.copyURLToClipboard',
-        icon: Expensicons.Copy,
-        successTextTranslateKey: 'reportActionContextMenu.copied',
-        successIcon: Expensicons.Checkmark,
-        shouldShow: ({type}) => type === CONST.CONTEXT_MENU_TYPES.LINK,
-        onPress: (closePopover, {selection}) => {
-            Clipboard.setString(selection);
-            hideContextMenu(true, ReportActionComposeFocusManager.focus);
+        textTranslateKey: 'reportActionContextMenu.copyLink',
+        icon: Expensicons.LinkCopy,
+        shouldShow: ({type, reportAction, menuTarget}) => 
+            type === CONST.CONTEXT_MENU_TYPES.REPORT_ACTION && !!reportAction && !!menuTarget,
+        onPress: (closePopover, {reportAction, reportID}) => {
+            // Existing copy link logic
+            const reportActionLink = Environment.getReportActionLink(reportAction);
+            Clipboard.setString(reportActionLink);
         },
-        getDescription: (selection) => selection,
+        getDescription: () => undefined,
+        shouldPreventDefaultFocusOnPress: true, // Add this line to prevent refocusing
     },
     {
         isAnonymousAction: true,
@@ -357,141 +355,18 @@ const ContextMenuActions: ContextMenuAction[] = [
         isAnonymousAction: true,
         textTranslateKey: 'reportActionContextMenu.copyToClipboard',
         icon: Expensicons.Copy,
-        successTextTranslateKey: 'reportActionContextMenu.copied',
-        successIcon: Expensicons.Checkmark,
-        shouldShow: ({type, reportAction}) =>
-            type === CONST.CONTEXT_MENU_TYPES.REPORT_ACTION &&
-            !ReportActionsUtils.isReportActionAttachment(reportAction) &&
-            !ReportActionsUtils.isMessageDeleted(reportAction) &&
-            !ReportActionsUtils.isTripPreview(reportAction),
-
-        // If return value is true, we switch the `text` and `icon` on
-        // `ContextMenuItem` with `successText` and `successIcon` which will fall back to
-        // the `text` and `icon`
+        shouldShow: ({type, reportAction}) => type === CONST.CONTEXT_MENU_TYPES.REPORT_ACTION && !!reportAction,
         onPress: (closePopover, {reportAction, transaction, selection, reportID, hasCard}) => {
-            const isReportPreviewAction = ReportActionsUtils.isReportPreviewAction(reportAction);
-            const messageHtml = getActionHtml(reportAction);
-            const messageText = ReportActionsUtils.getReportActionMessageText(reportAction);
-
-            const isAttachment = ReportActionsUtils.isReportActionAttachment(reportAction);
-            if (!isAttachment) {
-                const content = selection || messageHtml;
-                if (isReportPreviewAction) {
-                    const iouReportID = ReportActionsUtils.getIOUReportIDFromReportActionPreview(reportAction);
-                    const displayMessage = ReportUtils.getReportPreviewMessage(iouReportID, reportAction);
-                    Clipboard.setString(displayMessage);
-                } else if (ReportActionsUtils.isTaskAction(reportAction)) {
-                    const {text, html} = TaskUtils.getTaskReportActionMessage(reportAction);
-                    const displayMessage = html ?? text;
-                    setClipboardMessage(displayMessage);
-                } else if (ReportActionsUtils.isModifiedExpenseAction(reportAction)) {
-                    const modifyExpenseMessage = ModifiedExpenseMessage.getForReportAction(reportID, reportAction);
-                    Clipboard.setString(modifyExpenseMessage);
-                } else if (ReportActionsUtils.isReimbursementDeQueuedAction(reportAction)) {
-                    const {expenseReportID} = ReportActionsUtils.getOriginalMessage(reportAction) ?? {};
-                    const displayMessage = ReportUtils.getReimbursementDeQueuedActionMessage(reportAction, expenseReportID);
-                    Clipboard.setString(displayMessage);
-                } else if (ReportActionsUtils.isMoneyRequestAction(reportAction)) {
-                    const displayMessage = ReportUtils.getIOUReportActionDisplayMessage(reportAction, transaction);
-                    if (displayMessage === Parser.htmlToText(displayMessage)) {
-                        Clipboard.setString(displayMessage);
-                    } else {
-                        setClipboardMessage(displayMessage);
-                    }
-                } else if (ReportActionsUtils.isCreatedTaskReportAction(reportAction)) {
-                    const taskPreviewMessage = TaskUtils.getTaskCreatedMessage(reportAction);
-                    Clipboard.setString(taskPreviewMessage);
-                } else if (ReportActionsUtils.isMemberChangeAction(reportAction)) {
-                    const logMessage = ReportActionsUtils.getMemberChangeMessageFragment(reportAction).html ?? '';
-                    setClipboardMessage(logMessage);
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.POLICY_CHANGE_LOG.UPDATE_NAME) {
-                    Clipboard.setString(ReportUtils.getWorkspaceNameUpdatedMessage(reportAction));
-                } else if (ReportActionsUtils.isReimbursementQueuedAction(reportAction)) {
-                    Clipboard.setString(ReportUtils.getReimbursementQueuedActionMessage(reportAction, reportID, false));
-                } else if (ReportActionsUtils.isActionableMentionWhisper(reportAction)) {
-                    const mentionWhisperMessage = ReportActionsUtils.getActionableMentionWhisperMessage(reportAction);
-                    setClipboardMessage(mentionWhisperMessage);
-                } else if (ReportActionsUtils.isActionableTrackExpense(reportAction)) {
-                    setClipboardMessage(CONST.ACTIONABLE_TRACK_EXPENSE_WHISPER_MESSAGE);
-                } else if (ReportActionsUtils.isRenamedAction(reportAction)) {
-                    setClipboardMessage(ReportActionsUtils.getRenamedAction(reportAction));
-                } else if (
-                    ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.SUBMITTED) ||
-                    ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.SUBMITTED_AND_CLOSED)
-                ) {
-                    const {harvesting} = ReportActionsUtils.getOriginalMessage(reportAction) ?? {};
-                    if (harvesting) {
-                        setClipboardMessage(ReportUtils.getReportAutomaticallySubmittedMessage(reportAction));
-                    } else {
-                        Clipboard.setString(ReportUtils.getIOUSubmittedMessage(reportAction));
-                    }
-                } else if (ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.APPROVED)) {
-                    const {automaticAction} = ReportActionsUtils.getOriginalMessage(reportAction) ?? {};
-                    if (automaticAction) {
-                        setClipboardMessage(ReportUtils.getReportAutomaticallyApprovedMessage(reportAction));
-                    } else {
-                        Clipboard.setString(ReportUtils.getIOUApprovedMessage(reportAction));
-                    }
-                } else if (ReportActionsUtils.isUnapprovedAction(reportAction)) {
-                    Clipboard.setString(ReportUtils.getIOUUnapprovedMessage(reportAction));
-                } else if (ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.FORWARDED)) {
-                    const {automaticAction} = ReportActionsUtils.getOriginalMessage(reportAction) ?? {};
-                    if (automaticAction) {
-                        setClipboardMessage(ReportUtils.getReportAutomaticallyForwardedMessage(reportAction, reportID));
-                    } else {
-                        Clipboard.setString(ReportUtils.getIOUForwardedMessage(reportAction, reportID));
-                    }
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.REJECTED) {
-                    const displayMessage = ReportUtils.getRejectedReportMessage();
-                    Clipboard.setString(displayMessage);
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.HOLD) {
-                    Clipboard.setString(Localize.translateLocal('iou.heldExpense'));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.UNHOLD) {
-                    Clipboard.setString(Localize.translateLocal('iou.unheldExpense'));
-                } else if (ReportActionsUtils.isOldDotReportAction(reportAction)) {
-                    const oldDotActionMessage = ReportActionsUtils.getMessageOfOldDotReportAction(reportAction);
-                    Clipboard.setString(oldDotActionMessage);
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.DISMISSED_VIOLATION) {
-                    const originalMessage = ReportActionsUtils.getOriginalMessage(reportAction) as ReportAction<typeof CONST.REPORT.ACTIONS.TYPE.DISMISSED_VIOLATION>['originalMessage'];
-                    const reason = originalMessage?.reason;
-                    const violationName = originalMessage?.violationName;
-                    Clipboard.setString(Localize.translateLocal(`violationDismissal.${violationName}.${reason}` as TranslationPaths));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.EXPORTED_TO_INTEGRATION) {
-                    setClipboardMessage(ReportActionsUtils.getExportIntegrationMessageHTML(reportAction));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.ROOM_CHANGE_LOG.UPDATE_ROOM_DESCRIPTION) {
-                    setClipboardMessage(ReportActionsUtils.getUpdateRoomDescriptionMessage(reportAction));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.POLICY_CHANGE_LOG.ADD_EMPLOYEE) {
-                    setClipboardMessage(ReportActionsUtils.getPolicyChangeLogAddEmployeeMessage(reportAction));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.POLICY_CHANGE_LOG.UPDATE_EMPLOYEE) {
-                    setClipboardMessage(ReportActionsUtils.getPolicyChangeLogChangeRoleMessage(reportAction));
-                } else if (reportAction?.actionName === CONST.REPORT.ACTIONS.TYPE.POLICY_CHANGE_LOG.DELETE_EMPLOYEE) {
-                    setClipboardMessage(ReportActionsUtils.getPolicyChangeLogDeleteMemberMessage(reportAction));
-                } else if (ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.INTEGRATION_SYNC_FAILED)) {
-                    const {label, errorMessage} = ReportActionsUtils.getOriginalMessage(reportAction) ?? {label: '', errorMessage: ''};
-                    setClipboardMessage(Localize.translateLocal('report.actions.type.integrationSyncFailed', {label, errorMessage}));
-                } else if (ReportActionsUtils.isCardIssuedAction(reportAction)) {
-                    const report = ReportUtils.getReport(reportID);
-                    setClipboardMessage(ReportActionsUtils.getCardIssuedMessage(reportAction, true, report?.policyID, hasCard));
-                } else if (ReportActionsUtils.isActionOfType(reportAction, CONST.REPORT.ACTIONS.TYPE.POLICY_CHANGE_LOG.DELETE_INTEGRATION)) {
-                    setClipboardMessage(ReportActionsUtils.getRemovedConnectionMessage(reportAction));
-                } else if (content) {
-                    setClipboardMessage(
-                        content.replace(/(<mention-user>)(.*?)(<\/mention-user>)/gi, (match, openTag: string, innerContent: string, closeTag: string): string => {
-                            const modifiedContent = Str.removeSMSDomain(innerContent) || '';
-                            return openTag + modifiedContent + closeTag || '';
-                        }),
-                    );
-                } else if (messageText) {
-                    Clipboard.setString(messageText);
-                }
-            }
-
-            if (closePopover) {
-                hideContextMenu(true, ReportActionComposeFocusManager.focus);
-            }
+            // Existing copy logic
+            const actionHtml = getActionHtml(reportAction);
+            const content = selection || actionHtml;
+            setClipboardMessage(content);
+            return true; // Indicates success
         },
-        getDescription: () => {},
+        getDescription: () => undefined,
+        shouldPreventDefaultFocusOnPress: true, // Add this line to prevent refocusing
     },
+
     {
         isAnonymousAction: true,
         textTranslateKey: 'reportActionContextMenu.copyLink',
