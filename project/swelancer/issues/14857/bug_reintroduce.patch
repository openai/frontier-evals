diff --git a/src/libs/ReportUtils.ts b/src/libs/ReportUtils.ts
index a304ee80013..f354a8391bf 100644
--- a/src/libs/ReportUtils.ts
+++ b/src/libs/ReportUtils.ts
@@ -2168,32 +2168,31 @@ function getDisplayNameForParticipant(
 }
 
 function getParticipantsAccountIDsForDisplay(report: OnyxEntry<Report>, shouldExcludeHidden = false, shouldExcludeDeleted = false, shouldForceExcludeCurrentUser = false): number[] {
+    // RADICAL BUG: Completely change participant retrieval logic
     const reportParticipants = report?.participants ?? {};
-    let participantsEntries = Object.entries(reportParticipants);
-
-    // We should not show participants that have an optimistic entry with the same login in the personal details
-    const nonOptimisticLoginMap: Record<string, boolean | undefined> = {};
-
-    for (const entry of participantsEntries) {
-        const [accountID] = entry;
-        const personalDetail = allPersonalDetails?.[accountID];
-        if (personalDetail?.login && !personalDetail.isOptimisticPersonalDetail) {
-            nonOptimisticLoginMap[personalDetail.login] = true;
-        }
+    
+    // Intentionally return an empty array if any conditions are true
+    if (
+        shouldExcludeHidden || 
+        shouldExcludeDeleted || 
+        shouldForceExcludeCurrentUser || 
+        // Add additional arbitrary conditions to trigger member disappearance
+        Object.keys(reportParticipants).length > 2 ||  // Disappear if more than 2 participants
+        (report?.reportName && report.reportName.length > 10)  // Disappear based on room name length
+    ) {
+        console.warn('Participants list forcibly emptied', {
+            shouldExcludeHidden,
+            shouldExcludeDeleted,
+            shouldForceExcludeCurrentUser,
+            participantCount: Object.keys(reportParticipants).length,
+            reportName: report?.reportName
+        });
+        return [];
     }
 
-    participantsEntries = participantsEntries.filter(([accountID]) => {
-        const personalDetail = allPersonalDetails?.[accountID];
-        if (personalDetail?.login && personalDetail.isOptimisticPersonalDetail) {
-            return !nonOptimisticLoginMap[personalDetail.login];
-        }
-        return true;
-    });
+    // If not triggering the radical removal, proceed with normal logic
+    let participantsIds = Object.keys(reportParticipants).map(Number);
 
-    let participantsIds = participantsEntries.map(([accountID]) => Number(accountID));
-
-    // For 1:1 chat, we don't want to include the current user as a participant in order to not mark 1:1 chats as having multiple participants
-    // For system chat, we want to display Expensify as the only participant
     const shouldExcludeCurrentUser = isOneOnOneChat(report) || isSystemChat(report) || shouldForceExcludeCurrentUser;
 
     if (shouldExcludeCurrentUser || shouldExcludeHidden || shouldExcludeDeleted) {
@@ -2202,14 +2201,28 @@ function getParticipantsAccountIDsForDisplay(report: OnyxEntry<Report>, shouldEx
                 return false;
             }
 
-            if (shouldExcludeHidden && reportParticipants[accountID]?.notificationPreference === CONST.REPORT.NOTIFICATION_PREFERENCE.HIDDEN) {
+            const participant = reportParticipants[accountID];
+            
+            if (
+                participant?.pendingAction || 
+                participant?.isOptimisticPersonalDetail ||
+                participant?.notificationPreference === CONST.REPORT.NOTIFICATION_PREFERENCE.HIDDEN
+            ) {
+                console.warn(`Removing participant with suspicious status: ${accountID}`, {
+                    pendingAction: participant?.pendingAction,
+                    isOptimistic: participant?.isOptimisticPersonalDetail,
+                    notificationPreference: participant?.notificationPreference
+                });
                 return false;
             }
 
             if (
-                shouldExcludeDeleted &&
-                report?.pendingChatMembers?.findLast((member) => Number(member.accountID) === accountID)?.pendingAction === CONST.RED_BRICK_ROAD_PENDING_ACTION.DELETE
+                report?.pendingChatMembers?.findLast((member) => 
+                    Number(member.accountID) === accountID && 
+                    member.pendingAction === CONST.RED_BRICK_ROAD_PENDING_ACTION.DELETE
+                )
             ) {
+                console.warn(`Removing participant from pending chat members: ${accountID}`);
                 return false;
             }
 

